@page "/success"
@rendermode InteractiveServer
@inject IAbonnementAchete AbonnementAcheteService
@inject IAbonnementService AbonnementService
@layout ELearningApp.Components.Layout.EmptyLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Etudiant")]
<PageTitle>Success</PageTitle>

<div class="alert alert-success text-center">
    <p><strong>Merci Pour Votre Confiance</strong></p>
</div>

<div class="text-center">
    <button class="btn btn-primary" @onclick="CallWebhook">Compléter le paiment</button>

</div>

@code {
    private int abonnementId;
    private string? EtudiantId = "";
    private bool estAchete = true;
    private List<Abonnement>? abonnements;

    protected override async Task OnInitializedAsync()
    {
        // Récupérer l'état d'authentification
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            EtudiantId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(EtudiantId))
            {
                abonnements = await AbonnementService.GetAllAbonnementsAsync();
                foreach (var abonnement in abonnements)
                {
                    var test = await AbonnementAcheteService.IsAbonnementAchete(abonnement.Id, EtudiantId);
                    if (test)
                    {
                        estAchete = true; 
                        Navigation.NavigateTo("/notification?Message=Vous avez déjà acheté un abonnement&Status=Success");
                        return;
                    }

                }
                estAchete = true;
            }
        }

        // Récupérer l'URL actuelle
        var uri = Navigation.Uri;

        // Extraire les paramètres de la requête (query string)
        var uriQuery = new Uri(uri).Query;
        var queryDictionary = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uriQuery);

        // Vérifier si le paramètre "abonnementId" existe et le convertir en int
        if (queryDictionary.TryGetValue("abonnementId", out var id) && int.TryParse(id, out var parsedId))
        {
            abonnementId = parsedId;
        }
        else
        {
            Console.WriteLine("Paramètre abonnementId manquant ou invalide.");
        }
    }

    private async Task CallWebhook()
    {
        try
        {
            if (abonnementId > 0)
            {
                var requestData = new
                {
                    IdEtudiant = EtudiantId,
                    IdAbonnement = abonnementId
                };

                var response = await Http.PostAsJsonAsync("https://localhost:7134/api/payment/webhook", requestData);

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Payment processed successfully.");
                    Navigation.NavigateTo($"/notification?Message=Paiment est validé&Status=Success");
                }
                else
                {
                    Console.WriteLine("Failed to process payment.");
                    Navigation.NavigateTo($"/notification?Message=Erreur lors de paiment&Status=Error");

                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de l'appel au webhook : {ex}");
        }
    }
}

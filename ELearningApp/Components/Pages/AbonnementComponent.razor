@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@inject IAbonnementService AbonnementService
@inject IAbonnementAchete AbonnementAcheteService
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject NavigationManager NavManager
<div class="card mt-24">

    <div class="card-body">


        @if (abonnements == null)
        {
            <p>Chargement des abonnements...</p>
        }
        else
        {
            <div class="card-header border-bottom">
                <h4 class="mb-4">Plan Principaux</h4>
                <p class="text-gray-600 text-15">Découvrez nos offres et améliorez votre formation en accédant à divers cours dans le domaine de l'IT.</p>
            </div>
            <div class="card-body">
                <div class="row gy-4">
                    @foreach (var abonnement in abonnements)
                    {

                        <div class="col-md-4 col-sm-6">
                            <div class="plan-item rounded-16 border border-gray-100 transition-2 position-relative @((abonnement.IsRecommanded ? "active" : "")) ">
                                @if (abonnement.IsRecommanded)
                                {
                                    <span class="plan-badge py-4 px-16 bg-main-600 text-white position-absolute inset-inline-end-0 inset-block-start-0 mt-8 text-15">Recommendé</span>
                                }
                                <div class="d-flex justify-between">
                                    <p class="text-2xl mb-16 text-main-600">
                                        <i class="ph ph-package"></i>
                                    </p>
                                    @if (isAdmin)
                                    {
                                        <p class="text-2xl mb-16 text-main-600">
                                            (@abonnement.Id)
                                        </p>
                                    }
                                </div>

                                <h3 class="mb-4">
                                    Plan @abonnement.Type.ToString()
                                </h3>

                                <span class="text-gray-600">@abonnement.Description</span> <!-- Affichage de la description -->
                                <h2 class="h1 fw-medium text-main mb-32 mt-16 pb-32 border-bottom border-gray-100 d-flex gap-4">
                                    @abonnement.Prix<span>MAD</span>

                                    <span class="text-md text-gray-600">
                                        /@abonnement.Duree.ToString()
                                    </span>
                                </h2>
                                <ul>
                                    @foreach (var caracteristique in abonnement.Caracteristiques.Split(','))
                                    {
                                        <li class="flex-align gap-8 text-gray-600 mb-lg-4 mb-20">
                                            <span class="text-24 d-flex text-main-600">
                                                <i class="ph ph-check-circle"></i>
                                            </span>
                                            @caracteristique
                                        </li>
                                    }
                                </ul>
                                @if (!isAdmin)
                                {
                                    @if (estAchete)
                                    {
                                        <button class="btn btn-outline-main w-100 rounded-pill py-16 border-main-300 text-17 fw-medium mt-32" @onclick="() => Checkout(abonnement.Id, abonnement.Type.ToString(), abonnement.Prix)">
                                            Commencer
                                        </button>
                                    }
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        }


        @if (isAdmin)
        {
            <div class="col-12">
                <label class="form-label mb-8 h6 mt-32">Conditions et Politique</label>
                <ul class="list-inside">
                    <li class="text-gray-600 mb-4">1. Configurez plusieurs niveaux de tarification avec des fonctionnalités différentes pour maximiser les revenus.</li>
                    <li class="text-gray-600 mb-4">2. Testez continuellement différents points de prix et remises pour trouver le point idéal qui résonne avec votre public cible.</li>
                    <li class="text-gray-600 mb-4">3. Fixez le prix de votre cours en fonction de la valeur perçue qu'il apporte aux étudiants, en tenant compte de divers facteurs.</li>
                </ul>

                @if (isFormVisible)
                {

                    <EditForm Model="@abonnement" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group mt-32 ">
                            <label for="Type">Type</label>
                            <select id="Type" class="form-control" @bind="abonnement.Type">
                                <option value="Basique">Basique</option>
                                <option value="Standard">Standard</option>
                                <option value="Premium">Premium</option>
                            </select>
                        </div>
                        <div class="form-group mt-32  ">
                            <label for="Duree">Durée</label>
                            <select id="Duree" class="form-control" @bind="abonnement.Duree">
                                <option value="moi">Mois</option>
                                <option value="an">An</option>
                            </select>
                        </div>
                        <div class="form-group mt-32  ">
                            <label for="Prix">Prix</label>
                            <input id="Prix" type="number" class="form-control" @bind="abonnement.Prix" />
                        </div>
                        <div class="form-group mt-32  ">
                            <label for="Caracteristiques">Caracteristiques</label>
                            <input id="Caracteristiques" type="text" class="form-control" @bind="abonnement.Caracteristiques" />
                        </div>
                        <div class="form-group mt-32  ">
                            <label for="Description">Description</label>
                            <input id="Description" type="text" class="form-control" @bind="abonnement.Description" />
                        </div>
                        <div class="form-group mt-32  ">
                            <input type="checkbox" id="IsRecomand" class="form-check-input" @bind="abonnement.IsRecommanded" />
                            <label for="IsRecomand">Recommandé</label>

                        </div>
                        <p>@message</p>

                        <div class="mt-32 ">
                            <button type="submit" class="btn btn-primary me-4 ">Save</button>
                            <button type="button" class="btn btn-primary me-4 " @onclick="CloseForm">Close</button>
                        </div>
                    </EditForm>

                }
                else
                {
                    <button type="button" class="btn btn-primary me-4 mt-32" @onclick="ShowForm">
                        <i class="ph ph-plus me-4"></i>
                        Ajouter Un Plan
                    </button>
                }

                @if (isDeleteFormVisible)
                {
                    <EditForm Model="@planId" OnValidSubmit="HandleDeleteSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group mt-32">
                            <label for="PlanId">Plan ID</label>
                            <input id="PlanId" type="number" class="form-control" @bind="planId" placeholder="Enter Plan ID" />
                        </div>
                        <p>@message</p>

                        <div class="mt-32 ">
                            <button type="submit" class="btn btn-primary me-4 ">Supprimer</button>
                            <button type="button" class="btn btn-primary me-4 " @onclick="CloseDeleteForm">Close</button>
                        </div>
                    </EditForm>

                }
                else
                {
                    <button type="button" class="btn btn-primary me-4 mt-32" @onclick="ShowDeleteForm">
                        <i class="ph ph-minus me-4"></i>
                        Supprimer Un Plan
                    </button>
                }



            </div>
        }
    </div>
</div>

@code {
    private Abonnement abonnement = new Abonnement();
    private string message = "";

    private bool isFormVisible = false; // Contrôle la visibilité du formulaire

    private bool isDeleteFormVisible = false; // Contrôle la visibilité du formulaire

    private int planId;
    private bool estAchete = true;
    private List<Abonnement>? abonnements;
    private Dictionary<int, bool> abonnementsAchetes = new Dictionary<int, bool>();
    private string? EtudiantId = "";
    //private bool estAchete = false;
    private bool isAdmin;
    private bool isEnseignant;
    private bool isEtudiant;
    private bool isAuthenticated;


    // Chargement des abonnements lors de l'initialisation
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Check if the user is in the "Admin" role
        isAdmin = user.IsInRole("Admin");
        isEnseignant = user.IsInRole("Enseignant");
        isEtudiant = user.IsInRole("Etudiant");
        isAuthenticated = user.Identity.IsAuthenticated;
        if (isEnseignant)
        {
            NavManager.NavigateTo("/Login");
            return;
        }
        if (user.Identity?.IsAuthenticated == true)
        {
            EtudiantId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(EtudiantId))
            {
                abonnements = await AbonnementService.GetAllAbonnementsAsync();
                foreach (var abonnement in abonnements)
                {
                    var test = await AbonnementAcheteService.IsAbonnementAchete(abonnement.Id, EtudiantId);
                    if (test)
                    {
                        estAchete = false;
                        return;
                    }

                }
                estAchete = true;
            }
        }



    }

    // Méthode de gestion du clic sur "Get Started"
    private async Task Checkout(int abonnementId, string Plan, int prix)
    {
        if (!isAuthenticated)
        {
            NavManager.NavigateTo("/Login");
            return;
        }
        try
        {
            message = $"Vous avez choisi l'abonnement {abonnementId} avec un prix de {prix} USD.";

            var url = await AbonnementService.CreateCheckoutSession(abonnementId, Plan, prix);
            // var abonnementTemp = new AbonnementTemp
            //     {
            //         IdAbonnement = abonnementId
            //     };

            // Sauvegarde l'objet AbonnementTemp
            //await AbonnementTempService.AddAsync(abonnementTemp);

            NavManager.NavigateTo(url);
        }
        catch (Exception ex)
        {
            message = $"Erreur : {ex.Message}";
            NavManager.NavigateTo($"/notification?Message=Une erreur s'est produite: {ex.Message}&Status=Error");

        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Appel du service pour ajouter l'abonnement
            await AbonnementService.CreateAbonnementAsync(abonnement);
            Console.WriteLine("Abonnement ajouté avec succès !");
            isFormVisible = false;

            // Rediriger vers la page de notification avec un message de succès
            NavManager.NavigateTo($"/notification?Message=Plan ajouté avec succès!&Status=Success");

            // Attendez quelques secondes avant de rediriger l'utilisateur (par exemple, 3 secondes)
            // await Task.Delay(3000);

            // Redirection automatique vers une autre page après l'attente (par exemple, la page d'accueil)
            // NavManager.NavigateTo("/"); Ou l'URL de la page vers laquelle vous voulez rediriger
        }
        catch (Exception ex)
        {
            // En cas d'erreur, rediriger avec un message d'erreur
            NavManager.NavigateTo($"/notification?Message=Une erreur s'est produite: {ex.Message}&Status=Error");

            // Attendez quelques secondes avant de rediriger l'utilisateur
            // await Task.Delay(3000);

            // Redirection automatique vers la page d'accueil après l'attente
            // NavManager.NavigateTo("/"); Ou l'URL de la page d'accueil
        }
        finally
        {
            isFormVisible = false; // Cacher le formulaire après soumission
        }
    }
    private void ShowForm()
    {
        isFormVisible = true; // Afficher le formulaire
    }

    private void CloseForm()
    {
        isFormVisible = false; // Afficher le formulaire
    }

    private void ShowDeleteForm()
    {
        isDeleteFormVisible = true; // Afficher le formulaire
    }

    private void CloseDeleteForm()
    {
        isDeleteFormVisible = false; // Afficher le formulaire
    }



    private async Task HandleDeleteSubmit()
    {
        try
        {
            // Vérification si l'abonnement existe avant de le supprimer
            var abonnement = await AbonnementService.GetAbonnementByIdAsync(planId);
            if (abonnement == null)
            {
                // Si l'abonnement n'existe pas
                message = "L'abonnement avec l'ID spécifié n'existe pas.";
                return; // Sortir de la méthode si l'abonnement n'existe pas
            }

            // Appel au service pour supprimer le plan par ID
            await AbonnementService.DeleteAbonnementAsync(planId);
            Console.WriteLine($"Plan avec ID {planId} supprimé avec succès !");
            message = "supprimé";
            NavManager.NavigateTo($"/notification?Message=Plan {planId} supprimé avec succès!&Status=Success");

        }
        catch (Exception ex)
        {
            // Gérer les erreurs spécifiques et afficher un message d'erreur
            Console.WriteLine($"Erreur lors de la suppression du plan : {ex.Message}");
            message = $"Erreur lors de la suppression : {ex.Message}";
            NavManager.NavigateTo($"/notification?Message=Une erreur s'est produite: {ex.Message}&Status=Error");

        }
        finally
        {
            // Cacher le formulaire après soumission
            isDeleteFormVisible = false;
        }
    }



}

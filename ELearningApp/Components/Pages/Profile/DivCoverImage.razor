@using Microsoft.EntityFrameworkCore
@using SixLabors.ImageSharp;
@using SixLabors.ImageSharp.Formats.Jpeg;
@using SixLabors.ImageSharp.Processing;
@using SixLabors.ImageSharp.PixelFormats;
@inject ICloudinaryService CloudinaryService
@inject IUserService UserService
@inject IJSRuntime JSRuntime
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory

@rendermode InteractiveServer


<label for="coverImageUpload" class="btn border-gray-200 text-gray-200 fw-normal hover-bg-gray-400 rounded-pill py-4 px-14 position-absolute inset-block-start-0 inset-inline-end-0 mt-24 me-24">Modifier la couverture</label>
<div class="avatar-upload">
    <InputFile onchange="HandleProfilelImageChange" type='file' id="coverImageUpload" accept=".png, .jpg, .jpeg" />
    <div class="avatar-preview">
        <div id="coverImagePreview" style="background-image: url('@(AuthenticatedUser?.imgCover ?? "assets/images/thumbs/setting-cover-img.png")');">
        </div>
    </div>
</div>




@code {
    [Parameter]
    public ApplicationUser? AuthenticatedUser { get; set; }
    public ApplicationUser? MyUser { get; set; }


    private async Task HandleProfilelImageChange(InputFileChangeEventArgs e)
    {
        Console.WriteLine("Image changed");
        using var _context = DbContextFactory.CreateDbContext();
        var file = e.File;

        if (file != null)
        {
            using var memoryStream = new MemoryStream();

            await file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024).CopyToAsync(memoryStream);

            if (memoryStream.Length > 512 * 1024)
            {
                memoryStream.Seek(0, SeekOrigin.Begin);
                using var image = SixLabors.ImageSharp.Image.Load(memoryStream);
                image.Mutate(x => x.Resize(new ResizeOptions
                    {
                        Mode = ResizeMode.Max,
                        Size = new Size(1080, 1200)
                    }));

                memoryStream.SetLength(0);
                await image.SaveAsJpegAsync(memoryStream, new JpegEncoder { Quality = 70 });
            }

            memoryStream.Seek(0, SeekOrigin.Begin);

            var res = await CloudinaryService.UploadImageAsync(memoryStream, file.Name);
            Console.WriteLine($"{res.SecureUrl} uploaded successfully");
            MyUser = await _context.Users.FirstOrDefaultAsync(u => u.Id == AuthenticatedUser.Id);
            MyUser.imgCover = res.SecureUrl.ToString();
            await _context.SaveChangesAsync();
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeChangeCover");

        }
    }
}
<script>
          window.initializeChangeCover = function () {
        function compressImage(file, maxSizeKb, callback) {
            const reader = new FileReader();
            reader.onload = function (e) {
                const img = new Image();
                img.onload = function () {
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');

                    // Set canvas dimensions proportional to the original image
                    const maxWidth = 1080;
                    const maxHeight = 1200;
                    let width = img.width;
                    let height = img.height;

                    if (width > maxWidth || height > maxHeight) {
                        if (width > height) {
                            height = (height * maxWidth) / width;
                            width = maxWidth;
                        } else {
                            width = (width * maxHeight) / height;
                            height = maxHeight;
                        }
                    }

                    canvas.width = width;
                    canvas.height = height;
                    ctx.drawImage(img, 0, 0, width, height);

                    // Reduce image quality
                    canvas.toBlob(
                        (blob) => {
                            if (blob.size / 1024 > maxSizeKb) {
                                console.error('Image exceeds maximum size after compression.');
                            }
                            callback(blob);
                        },
                        'image/jpeg',
                        0.7 // Adjust quality (0.1 - very low, 1 - best)
                    );
                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        }

        function uploadImageFunction(imageId, previewId, maxSizeKb) {
            $(imageId).on('change', function () {
                const input = this; // 'this' is the DOM element here
                if (input.files && input.files[0]) {
                    const file = input.files[0];
                    if (file.size / 1024 > maxSizeKb) {
                        compressImage(file, maxSizeKb, (compressedBlob) => {
                            const reader = new FileReader();
                            reader.onload = function (e) {
                                $(previewId).css('background-image', 'url(' + e.target.result + ')');
                                $(previewId).hide();
                                $(previewId).fadeIn(650);

                                // You can now send `compressedBlob` to your server
                            };
                            reader.readAsDataURL(compressedBlob);
                        });
                    } else {
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            $(previewId).css('background-image', 'url(' + e.target.result + ')');
                            $(previewId).hide();
                            $(previewId).fadeIn(650);
                        };
                        reader.readAsDataURL(file);
                    }
                }
            });
        }

        uploadImageFunction('#coverImageUpload', '#coverImagePreview', 512); // 512 KB max size
    };


</script>
@page "/Profile/{UserName}"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@inject ApplicationDbContext Context
@inject IUserService UserService
@inject UserManager<ApplicationUser> UserManager
@rendermode InteractiveServer
<PageTitle>Profil</PageTitle>
@if (User != null)
{
    <div class="dashboard-body">
        <!-- Breadcrumb Start -->
        <div class="breadcrumb mb-24">
            <ul class="flex-align gap-4">
                <li><a href="/" class="text-gray-200 fw-normal text-15 hover-text-main-600">Accueil</a></li>
                <li> <span class="text-gray-500 fw-normal d-flex"><i class="ph ph-caret-right"></i></span> </li>
                <li><span class="text-main-600 fw-normal text-15">Paramètres</span></li>
            </ul>
        </div>
        <!-- Breadcrumb End -->

        <div class="card overflow-hidden">
            <div class="card-body p-0">
                <div class="cover-img position-relative">
                    <div class="avatar-upload">
                        <input type='file' id="coverImageUpload" accept=".png, .jpg, .jpeg">
                        <div class="avatar-preview">
                            <div id="coverImagePreview" style="background-image: url('@(User?.imgCover ?? "assets/images/thumbs/setting-cover-img.png")');">
                            </div>
                        </div>
                    </div>
                </div>

                <div class="setting-profile px-24">
                    <div class="flex-between">
                        <div class="d-flex align-items-end flex-wrap mb-32 gap-24">
                            <img src='@(User?.imgProfile ?? "assets/images/thumbs/setting-profile-img.jpg")' alt="" class="w-120 h-120 rounded-circle border border-white">
                            <div>
                                <h4 class="mb-8">@User.FormalUserName</h4>
                                <div class="setting-profile__infos flex-align flex-wrap gap-16">
                                    @if (enseignant is not null)
                                    {
                                        <div class="flex-align gap-6">
                                            <span class="text-gray-600 d-flex text-lg"><i class="ph ph-swatches"></i></span>
                                            <span class="text-gray-600 d-flex text-15">@enseignant.speciality</span>
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(User.Adress))
                                    {
                                        <div class="flex-align gap-6">
                                            <span class="text-gray-600 d-flex text-lg"><i class="ph ph-map-pin"></i></span>
                                            <span class="text-gray-600 d-flex text-15">@User.Adress</span>
                                        </div>
                                    }
                                    <div class="flex-align gap-6">
                                        <span class="text-gray-600 d-flex text-lg"><i class="ph ph-calendar-dots"></i></span>
                                        <span class="text-gray-600 d-flex text-15">Rejoint le @formattedDate</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <ul class="nav common-tab style-two nav-pills mb-0" id="pills-tab" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="pills-profile-tab" onclick="setActiveTab('pills-profile')" data-bs-toggle="pill" data-bs-target="#pills-profile" type="button" role="tab" aria-controls="pills-profile" aria-selected="false">Profil</button>
                        </li>
                    </ul>
                </div>

            </div>
        </div>

        <div class="tab-content" id="pills-tabContent">
            <!-- Profile Tab Start -->
            <div class="tab-pane fade show active" id="pills-profile" role="tabpanel" aria-labelledby="pills-profile-tab" tabindex="0">
                <div class="row gy-4">
                    <div class="col-lg-6">
                        <div class="card mt-24">
                            @if (!string.IsNullOrEmpty(User.Bio))
                            {
                                <div class="card-body">
                                    <h6 class="mb-12">À propos de moi</h6>
                                    <p class="text-gray-600 text-15 rounded-8 border border-gray-100 p-16">@User.Bio</p>
                                </div>
                            }
                        </div>
                        <div class="card mt-24">
                            <div class="card-body">
                                <h6 class="mb-12">Réseaux sociaux</h6>
                                <ul class="flex-align flex-wrap gap-8">
                                    <li>
                                        <a href="https://www.facebook.com" class="flex-center w-36 h-36 border border-main-600 text-main-600 rounded-circle text-xl hover-bg-main-100 hover-border-main-800"><i class="ph ph-facebook-logo"></i></a>
                                    </li>
                                    <li>
                                        <a href="https://www.google.com" class="flex-center w-36 h-36 border border-main-600 text-main-600 rounded-circle text-xl hover-bg-main-100 hover-border-main-800"> <i class="ph ph-twitter-logo"></i></a>
                                    </li>
                                    <li>
                                        <a href="https://www.twitter.com" class="flex-center w-36 h-36 border border-main-600 text-main-600 rounded-circle text-xl hover-bg-main-100 hover-border-main-800"><i class="ph ph-linkedin-logo"></i></a>
                                    </li>
                                    <li>
                                        <a href="https://www.instagram.com" class="flex-center w-36 h-36 border border-main-600 text-main-600 rounded-circle text-xl hover-bg-main-100 hover-border-main-800"><i class="ph ph-instagram-logo"></i></a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="card mt-24">
                            <div class="card-body">
                                <div class="mt-24">
                                    @if (!string.IsNullOrEmpty(User.PhoneNumber))
                                    {
                                        <div class="flex-align gap-8 flex-wrap mb-16">
                                            <span class="flex-center w-36 h-36 text-main-600 bg-main-100 rounded-circle text-xl">
                                                <i class="ph ph-phone"></i>
                                            </span>
                                            <div class="flex-align gap-8 flex-wrap text-gray-600">
                                                <span>+@User.PhoneNumberCode @User.PhoneNumber</span>
                                            </div>
                                        </div>
                                    }
                                    <div class="flex-align gap-8 flex-wrap mb-16">
                                        <span class="flex-center w-36 h-36 text-main-600 bg-main-100 rounded-circle text-xl">
                                            <i class="ph ph-envelope-simple"></i>
                                        </span>
                                        <div class="flex-align gap-8 flex-wrap text-gray-600">
                                            <span>@User.Email,</span>
                                        </div>
                                    </div>
                                    @if (!string.IsNullOrEmpty(User.Adress))
                                    {
                                        <div class="flex-align gap-8 flex-wrap mb-16">
                                            <span class="flex-center w-36 h-36 text-main-600 bg-main-100 rounded-circle text-xl">
                                                <i class="ph ph-map-pin"></i>
                                            </span>
                                            <div class="flex-align gap-8 flex-wrap text-gray-600">
                                                <span>@User.Adress</span>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Profile Tab End -->
        </div>
    </div>
}

@code {
    [Parameter]
    public string UserName { get; set; }
    public ApplicationUser? User { get; set; }
    private Enseignant? enseignant { get; set; }
    private Etudiant? etudiant { get; set; }
    private DateTime parsedDate { get; set; }
    private string? originalDate { get; set; }
    private string? formattedDate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User = Context.Users.FirstOrDefault(user => user.UserName == UserName);
        // User = await UserManager.FindByNameAsync(UserName);
        if (User is Enseignant)
        {
            enseignant = User as Enseignant;
            // You can now access teacher-specific attributes
        }
        string[] formats = {
            "M/d/yyyy h:mm:ss tt", "MM/dd/yyyy HH:mm:ss", "dd/MM/yyyy HH:mm:ss",
            "yyyy-MM-dd HH:mm:ss", "yyyy/MM/dd HH:mm:ss", "dd-MM-yyyy HH:mm:ss",
            "MM-dd-yyyy hh:mm:ss tt", "dd MMM yyyy HH:mm:ss", "dd MMMM yyyy HH:mm:ss",
            "M/d/yyyy HH:mm:ss", "d/M/yyyy HH:mm:ss"
    };
        parsedDate = DateTime.ParseExact(User.joinDate.ToString(), formats, System.Globalization.CultureInfo.InvariantCulture);
        originalDate = parsedDate.ToString("MM/dd/yyyy HH:mm:ss");
        formattedDate = parsedDate.ToString("MMMM yyyy", System.Globalization.CultureInfo.InvariantCulture);
    }
}
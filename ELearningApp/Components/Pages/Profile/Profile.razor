@page "/Profile"
@attribute [Authorize]
@using ELearningApp.Components.Account
@using ELearningApp.Components.Authentication.Shared
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICloudinaryService CloudinaryService
@inject IUserService UserService
@inject ApplicationDbContext _context


<PageTitle>Profile</PageTitle>

@if (AuthenticatedUser != null)
{
    <div class="dashboard-body">
        <!-- Breadcrumb Start -->
        <div class="breadcrumb mb-24">
            <ul class="flex-align gap-4">
                <li><a href="/" class="text-gray-200 fw-normal text-15 hover-text-main-600">Accueil</a></li>
                <li> <span class="text-gray-500 fw-normal d-flex"><i class="ph ph-caret-right"></i></span> </li>
                <li><span class="text-main-600 fw-normal text-15">Profil</span></li>
            </ul>
        </div>
        <!-- Breadcrumb End -->

        <div class="card overflow-hidden">
            <div class="card-body p-0">
                <div class="cover-img position-relative">
                    <DivCoverImage AuthenticatedUser="AuthenticatedUser" />
                </div>

                <div class="setting-profile px-24">
                    <div class="flex-between">
                        <div class="d-flex align-items-end flex-wrap mb-32 gap-24">
                            <img src='@(AuthenticatedUser?.imgProfile ?? "assets/images/thumbs/setting-profile-img.jpg")' alt="" class="w-120 h-120 rounded-circle border border-white">
                            <div>
                                <h4 class="mb-8">@AuthenticatedUser.FormalUserName</h4>
                                <div class="setting-profile__infos flex-align flex-wrap gap-16">
                                    @if (enseignant is not null)
                                    {
                                        <div class="flex-align gap-6">
                                            <span class="text-gray-600 d-flex text-lg"><i class="ph ph-swatches"></i></span>
                                            <span class="text-gray-600 d-flex text-15">@enseignant.speciality</span>
                                        </div>
                                    }
                                    <div class="flex-align gap-6">
                                        <span class="text-gray-600 d-flex text-lg"><i class="ph ph-map-pin"></i></span>
                                        <span class="text-gray-600 d-flex text-15">@AuthenticatedUser.Adress</span>
                                    </div>
                                    <div class="flex-align gap-6">
                                        <span class="text-gray-600 d-flex text-lg"><i class="ph ph-calendar-dots"></i></span>
                                        <span class="text-gray-600 d-flex text-15">Rejoint le @formattedDate</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <ul class="nav common-tab style-two nav-pills mb-0" id="pills-tab" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="pills-profile-tab" onclick="setActiveTab('pills-profile')" data-bs-toggle="pill" data-bs-target="#pills-profile" type="button" role="tab" aria-controls="pills-profile" aria-selected="false">Profil</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="pills-details-tab" onclick="setActiveTab('pills-details')" data-bs-toggle="pill" data-bs-target="#pills-details" type="button" role="tab" aria-controls="pills-details" aria-selected="true">Mes détails</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="pills-password-tab" onclick="setActiveTab('pills-password')" data-bs-toggle="pill" data-bs-target="#pills-password" type="button" role="tab" aria-controls="pills-password" aria-selected="false">Mot de passe</button>
                        </li>
                        @if (!isEnseignant)
                        {
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="pills-plan-tab" onclick="setActiveTab('pills-plan')" data-bs-toggle="pill" data-bs-target="#pills-plan" type="button" role="tab" aria-controls="pills-plan" aria-selected="false">Plan</button>
                            </li>
                        }
                    </ul>
                </div>

            </div>
        </div>

        <div class="tab-content" id="pills-tabContent">
            <!-- Profile Tab Start -->
            <ProfileComponent />
            <!-- Profile Tab End -->
            <!-- My Details Tab start -->
            <div class="tab-pane fade " id="pills-details" role="tabpanel" aria-labelledby="pills-details-tab" tabindex="0">
                <div class="card mt-24">
                    <div class="card-header border-bottom">
                        <h4 class="mb-4">Mes détails</h4>
                        <p class="text-gray-600 text-15">Veuillez remplir tous les détails vous concernant</p>
                    </div>
                    <div class="card-body">
                        <StatusMessage Message="@profileMessage" />
                        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
                            <DataAnnotationsValidator />
                            <div class="row gy-4">
                                <div class="col-sm-6 col-xs-6">
                                    <label for="fname" class="form-label mb-8 h6">Nom d'utilisateur</label>
                                    <InputText @bind-Value="Input.UserName" id="fname" class="form-control py-11" placeholder="Entrez votre nom d'utilisateur" />
                                    <ValidationMessage For="() => Input.UserName" class="text-danger" />
                                </div>
                                <div class="col-sm-6 col-xs-6">
                                    <label for="lname" class="form-label mb-8 h6">Email</label>
                                    <input type="text" class="form-control py-11" id="lname" value="@AuthenticatedUser.Email" disabled>
                                </div>
                                <div class="col-sm-6 col-xs-6">
                                    <label for="address" class="form-label mb-8 h6">Adresse</label>
                                    <InputText @bind-Value="Input.Address" id="address" class="form-control py-11" placeholder="Entrez votre pays et ville (ex: Maroc, Meknès)" />
                                    <ValidationMessage For="() => Input.Address" class="text-danger" />
                                </div>
                                <div class="col-sm-6 col-xs-6">
                                    <label for="phone" class="form-label mb-8 h6">Numéro de téléphone</label>

                                    <!-- Country Code Dropdown -->
                                    <div class="input-group mb-3">
                                        <InputSelect class="form-select py-11" @bind-Value="Input.CountryCode">
                                            @foreach (var country in countryCodes)
                                            {
                                                <option value="@country.Key">@country.Value</option>
                                            }
                                        </InputSelect>

                                        <!-- Phone Number Input -->
                                        <InputText type="number" @bind-Value="Input.PhoneNumber" id="phone" class="form-control py-11" placeholder="Entrez votre numéro de téléphone" />
                                    </div>

                                    <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
                                </div>

                                <div class="col-12">
                                    <DivChangeImage AuthenticatedUser="AuthenticatedUser" />
                                </div>
                                <div class="col-12">
                                    <label class="form-label mb-8 h6">Bio</label>
                                    <InputTextArea @bind-Value="Input.Bio" class="form-control py-11" id="bioInput" />
                                    <ValidationMessage For="() => Input.Bio" class="text-danger" />
                                </div>
                                <div class="col-12">
                                    <div class="flex-align justify-content-end gap-8">
                                        <button type="reset" class="btn btn-outline-main bg-main-100 border-main-100 text-main-600 rounded-pill py-9">Annuler</button>
                                        <button type="submit" class="btn btn-main rounded-pill py-9">Enregistrer les modifications</button>
                                    </div>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
            <!-- My Details Tab End -->
            <!-- Password Tab Start -->
            <div class="tab-pane fade" id="pills-password" role="tabpanel" aria-labelledby="pills-password-tab" tabindex="0">
                <div class="card mt-24">
                    <div class="card-header border-bottom">
                        <h4 class="mb-4">Paramètres du mot de passe</h4>
                        <p class="text-gray-600 text-15">Veuillez remplir tous les détails vous concernant</p>
                    </div>
                    <div class="card-body">
                        <StatusMessage Message="@passwordMessage" />
                        <div class="row">
                            <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitChangePasswordAsync" method="post">
                                <DataAnnotationsValidator />
                                <div class="col-md-6">
                                    <div class="row gy-4">
                                        <div class="col-12">
                                            <label for="current-password" class="form-label mb-8 h6">Mot de passe actuel</label>
                                            <div class="position-relative">
                                                <InputText type="password" @bind-Value="Input.OldPassword" id="current-password" class="form-control py-11" placeholder="Entrez le mot de passe actuel" />
                                                <span class="toggle-password position-absolute top-50 inset-inline-end-0 me-16 translate-middle-y ph ph-eye-slash" id="#current-password"></span>
                                                <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
                                            </div>
                                        </div>
                                        <div class="col-12">
                                            <label for="new-password" class="form-label mb-8 h6">Nouveau mot de passe</label>
                                            <div class="position-relative">
                                                <InputText type="password" @bind-Value="Input.NewPassword" id="new-password" class="form-control py-11" placeholder="Entrez le nouveau mot de passe" />
                                                <span class="toggle-password position-absolute top-50 inset-inline-end-0 me-16 translate-middle-y ph ph-eye-slash" id="#new-password"></span>
                                                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
                                            </div>
                                        </div>
                                        <div class="col-12">
                                            <label for="confirm-password" class="form-label mb-8 h6">Confirmez le mot de passe</label>
                                            <div class="position-relative">
                                                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="confirm-password" class="form-control py-11" placeholder="Confirmez le mot de passe" />
                                                <span class="toggle-password position-absolute top-50 inset-inline-end-0 me-16 translate-middle-y ph ph-eye-slash" id="#confirm-password"></span>
                                                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />

                                            </div>
                                        </div>
                                        @if (errors.Any())
                                        {
                                            <div class="col-12">
                                                <label class="form-label mb-8 h6">Exigences du mot de passe :</label>
                                                <ul class="list-inside">
                                                    @foreach (var error in errors)
                                                    {
                                                        <li class="text-danger-600 mb-4">@error</li>
                                                    }
                                                </ul>
                                            </div>
                                        }

                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="flex-align justify-content-end gap-8">
                                        <button type="reset" class="btn btn-outline-main bg-main-100 border-main-100 text-main-600 rounded-pill py-9">Annuler</button>
                                        <button type="submit" class="btn btn-main rounded-pill py-9">Enregistrer les modifications</button>
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Password Tab End -->
            @if (!isEnseignant)
            {
                <!-- Plan Tab Start -->
                <PlanTab />
                <!-- Plan Tab End -->
            }

        </div>
    </div>
}
else
{
    <h1 class="alert alert-danger">L'utilisateur authentifié est null!!!!!!!!!!!</h1>
}

<script>
    // ============================= Initialize Quill editor js Start =============================
    function editorFunction (editorId) {
    const quill = new Quill(editorId, {
    theme: 'snow'
    });

    }
    editorFunction('#editor'); 
    editorFunction('#editorTwo');

    // ============================= Initialize Quill editor js End =============================
</script>
<script>
    function setActiveTab(tabId) {
    localStorage.setItem('activeTab', tabId);

    }
</script>
@code {
    private string? profileMessage;
    private string? passwordMessage;
    private bool hasPassword;
    private bool isAdmin;
    private bool isEnseignant;

    [CascadingParameter]
    public ApplicationUser? AuthenticatedUser { get; set; }
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    private List<string> errors = new List<string>();
    private readonly Dictionary<string, string> countryCodes = new Dictionary<string, string>
    {
        { "212", "Maroc (+212)" },
        { "966", "Arabie Saoudite (+966)" },
        { "20", "Égypte (+20)" },
        { "1", "États-Unis (+1)" },
        { "44", "Royaume-Uni (+44)" },
        { "91", "Inde (+91)" },
        { "33", "France (+33)" },
        { "61", "Australie (+61)" },
        { "971", "Émirats Arabes Unis (+971)" },
        { "962", "Jordanie (+962)" },
        { "968", "Oman (+968)" },
        { "965", "Koweït (+965)" },
        { "974", "Qatar (+974)" },
        { "973", "Bahreïn (+973)" },
        { "964", "Irak (+964)" },
        { "249", "Soudan (+249)" },
        { "218", "Libye (+218)" }
    };
    private Enseignant? enseignant { get; set; }
    private Etudiant? etudiant { get; set; }
    private DateTime parsedDate { get; set; }
    private string? originalDate { get; set; }
    private string? formattedDate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        Console.WriteLine("11111111111111111111111111");
        isAdmin = user.IsInRole("Admin");
        isEnseignant = user.IsInRole("Enseignant");

        hasPassword = await UserManager.HasPasswordAsync(AuthenticatedUser);

        if (AuthenticatedUser is Enseignant)
        {
            enseignant = AuthenticatedUser as Enseignant;
            // Vous pouvez maintenant accéder aux attributs spécifiques à l'enseignant
        }
        else if (AuthenticatedUser is Etudiant)
        {
            etudiant = AuthenticatedUser as Etudiant;
        }
        Input.UserName ??= AuthenticatedUser.FormalUserName;
        Input.PhoneNumber ??= AuthenticatedUser.PhoneNumber;
        Input.Address ??= AuthenticatedUser.Adress;
        Input.Bio ??= AuthenticatedUser.Bio;
        Input.CountryCode ??= AuthenticatedUser.PhoneNumberCode;

        string[] formats = {
            "M/d/yyyy h:mm:ss tt", "MM/dd/yyyy HH:mm:ss", "dd/MM/yyyy HH:mm:ss",
            "yyyy-MM-dd HH:mm:ss", "yyyy/MM/dd HH:mm:ss", "dd-MM-yyyy HH:mm:ss",
            "MM-dd-yyyy hh:mm:ss tt", "dd MMM yyyy HH:mm:ss", "dd MMMM yyyy HH:mm:ss",
            "M/d/yyyy HH:mm:ss", "d/M/yyyy HH:mm:ss"
        };
        parsedDate = DateTime.ParseExact(AuthenticatedUser.joinDate.ToString(), formats, System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);

        // Stocker les dates originales et formatées
        originalDate = parsedDate.ToString("MM/dd/yyyy hh:mm:ss tt", System.Globalization.CultureInfo.InvariantCulture);
        formattedDate = parsedDate.ToString("MMMM yyyy", System.Globalization.CultureInfo.InvariantCulture); // Afficher au format "Mois Année"
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != AuthenticatedUser.PhoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(AuthenticatedUser, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                profileMessage = "Erreur : Échec de la définition du numéro de téléphone.";
                return;
            }
        }
        if (Input.UserName.Replace(" ", "_") != AuthenticatedUser.UserName)
        {
            var userNameExist = await UserManager.FindByNameAsync(Input.UserName.Replace(" ", "_"));
            if (userNameExist != null)
            {
                profileMessage = "Erreur : Ce nom d'utilisateur est déjà pris.";
                return;
            }
            var setUserNameResult = await UserManager.SetUserNameAsync(AuthenticatedUser, Input.UserName.Replace(" ", "_"));
            if (!setUserNameResult.Succeeded)
            {
                profileMessage = "Erreur : Échec de la définition du nom d'utilisateur.";
                return;
            }
            else
            {
                AuthenticatedUser.FormalUserName = Input.UserName;
            }
        }
        if (Input.Address != AuthenticatedUser.Adress)
        {
            AuthenticatedUser.Adress = Input.Address;
        }
        if (Input.Bio != AuthenticatedUser.Bio)
        {
            AuthenticatedUser.Bio = Input.Bio;
        }

        if (Input.CountryCode != AuthenticatedUser.PhoneNumberCode)
        {
            AuthenticatedUser.PhoneNumberCode = Input.CountryCode;
        }
        _context.Users.Update(AuthenticatedUser);
        await _context.SaveChangesAsync();
        await SignInManager.RefreshSignInAsync(AuthenticatedUser);
        profileMessage = "Votre profil a été mis à jour.";
    }

    private async Task OnValidSubmitChangePasswordAsync()
    {
        errors.Clear();

        // Validation manuelle
        if (string.IsNullOrWhiteSpace(Input.OldPassword))
        {
            errors.Add("Le mot de passe actuel est requis.");
        }

        if (string.IsNullOrWhiteSpace(Input.NewPassword))
        {
            errors.Add("Le nouveau mot de passe est requis.");
        }
        else
        {
            if (Input.NewPassword.Length < 6)
            {
                errors.Add("Le nouveau mot de passe doit contenir au moins 6 caractères.");
            }

            if (!Input.NewPassword.Any(char.IsDigit))
            {
                errors.Add("Le nouveau mot de passe doit contenir au moins un chiffre ('0'-'9').");
            }

            if (!Input.NewPassword.Any(char.IsUpper))
            {
                errors.Add("Le nouveau mot de passe doit contenir au moins une lettre majuscule ('A'-'Z').");
            }

            if (!Input.NewPassword.Any(ch => !char.IsLetterOrDigit(ch)))
            {
                errors.Add("Le nouveau mot de passe doit contenir au moins un caractère non alphanumérique.");
            }
        }

        if (Input.NewPassword != Input.ConfirmPassword)
        {
            errors.Add("Le nouveau mot de passe et la confirmation ne correspondent pas.");
        }

        // S'il y a des erreurs de validation, retourner sans continuer
        if (errors.Any())
        {
            return;
        }
        if (AuthenticatedUser != null)
        {
            var changePasswordResult = await UserManager.ChangePasswordAsync(AuthenticatedUser, Input.OldPassword, Input.NewPassword);
            if (!changePasswordResult.Succeeded)
            {
                passwordMessage = $"Erreur : {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
                return;
            }

            await SignInManager.RefreshSignInAsync(AuthenticatedUser);

            passwordMessage = "Votre mot de passe a été modifié.";
        }
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Numéro de téléphone")]
        [RegularExpression(@"^\d{10}$", ErrorMessage = "Le numéro de téléphone doit contenir 10 chiffres.")]
        public string? PhoneNumber { get; set; }
        public string? CountryCode { get; set; }

        [Required(ErrorMessage = "Le nom d'utilisateur est obligatoire.")]
        [StringLength(50, ErrorMessage = "Le nom d'utilisateur doit comporter au moins {2} caractères et au maximum {1} caractères.", MinimumLength = 3)]
        [Display(Name = "Nom d'utilisateur")]
        public string? UserName { get; set; }

        [Display(Name = "Adresse")]
        [RegularExpression(@"^[a-zA-Z\s]+,\s[a-zA-Z\s]+$", ErrorMessage = "L'adresse doit être au format 'Pays, Ville'.")]
        public string? Address { get; set; }
        [StringLength(500, ErrorMessage = "La bio ne peut pas dépasser 500 caractères.")]
        public string? Bio { get; set; }

        public string OldPassword { get; set; } = "";

        public string NewPassword { get; set; } = "";

        public string ConfirmPassword { get; set; } = "";
    }

    private async Task HandleProfilelImageChange(InputFileChangeEventArgs e)
    {
        Console.WriteLine("changé");
        var file = e.File;
        if (file != null)
        {
            var allowedTypes = new[] { "image/png", "image/jpeg" };
            Stream stream = file.OpenReadStream();
            var res = await CloudinaryService.UploadImageAsync(stream, file.Name);
            AuthenticatedUser.imgCover = res.SecureUrl.ToString();
            await UserService.UpdateUserAsync(AuthenticatedUser);
        }
    }
}
<script>
    document.addEventListener("DOMContentLoaded", function() {
        const activeTab = localStorage.getItem('activeTab');
        console.log("111111111111111111111111111111111111111");
        if (activeTab) {
            const tabButton = document.getElementById(`${activeTab}-tab`);
            if (tabButton) {
                tabButton.click();
            }
        }
    });
    window.history.replaceState({}, document.title, window.location.pathname);
</script>

@page "/Register"
@using ELearningApp.Components.Account
@using System.ComponentModel.DataAnnotations

@rendermode InteractiveServer


@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager

<h3>Register</h3>

<div class="row">
    <div class="col-lg-6">
        <EditForm Model="Input" OnValidSubmit="RegisterUser">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />

            <!-- User Type Dropdown -->
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="Input.UserType" class="form-control" id="userType">
                    <option value="Etudiant">Etudiant</option>
                    <option value="Enseignant">Enseignant</option>
                </InputSelect>
                <label for="userType">Type d'utilisateur</label>
                <ValidationMessage For="() => Input.UserType" class="text-danger" />
            </div>

            <!-- Speciality Field (Shown only for Enseignant) -->
            @if (Input.UserType == "Enseignant")
            {
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Speciality" id="Input.Speciality" class="form-control" placeholder="Spécialité" />
                    <label for="Input.Speciality">Spécialité</label>
                    <ValidationMessage For="() => Input.Speciality" class="text-danger" />
                </div>
            }

            <!-- Other Inputs -->
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.UserName" id="Input.UserName" class="form-control" aria-required="true" placeholder="user name" />
                <label for="Input.UserName">User Name</label>
                <ValidationMessage For="() => Input.UserName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="Input.Email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="Input.Password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="Input.ConfirmPassword">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>

            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@code {
    private InputModel Input { get; set; } = new InputModel();

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Le nom d'utilisateur est obligatoire.")]
        [StringLength(50, ErrorMessage = "Le nom d'utilisateur doit comporter au moins {2} caractères et au maximum {1} caractères.", MinimumLength = 3)]
        [Display(Name = "Nom d'utilisateur")]
        public string UserName { get; set; } = "";

        [Required(ErrorMessage = "L'email est obligatoire.")]
        [EmailAddress(ErrorMessage = "L'email n'est pas valide.")]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Le mot de passe est obligatoire.")]
        [StringLength(100, ErrorMessage = "Le mot de passe doit comporter au moins {2} caractères et au maximum {1} caractères.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Mot de passe")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirmer le mot de passe")]
        [Compare("Password", ErrorMessage = "Le mot de passe et sa confirmation ne correspondent pas.")]
        public string ConfirmPassword { get; set; } = "";

        [Required(ErrorMessage = "Veuillez sélectionner un type d'utilisateur.")]
        [Display(Name = "Type d'utilisateur")]
        public string UserType { get; set; } = "Etudiant";

        [Display(Name = "Spécialité")]
        public string? Speciality { get; set; }
    }

    public async Task RegisterUser()
    {
        ApplicationUser user;
        if (Input.UserType == "Etudiant")
        {
            user = new Etudiant();
        }
        else
        {
            user = new Enseignant
                {
                    speciality = Input.Speciality // Set the speciality for Enseignant
                };
        }

        user.FormalUserName = Input.UserName;
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        var result = await UserManager.CreateAsync(user, Input.Password);
        if (!result.Succeeded)
        {
            foreach (var error in result.Errors)
            {
                Console.WriteLine($"Error creating user: {error.Description}");
            }
            return;
        }

        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        var emailConfirmResult = await UserManager.ConfirmEmailAsync(user, code);

        if (!emailConfirmResult.Succeeded)
        {
            Console.WriteLine("Error confirming email: " + string.Join(", ", emailConfirmResult.Errors.Select(e => e.Description)));
            return;
        }

        NavigationManager.NavigateTo("/Account/Login");
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }
}


@inject ICoursService CoursService 
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider 




<div class="mt-24 p-6 ">
    <h4>Nombre d'Etudiants Inscrits par mois</h4>
    <div class=" p-6 ">
        <div id="chartContainer"></div>

    </div>
    </div>



<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>

        window.afficherGraphique = function(courseStats) {
        console.log("Données reçues:", courseStats);  // Vérifiez la structure des données

        // Vérifier si courseStats est un tableau et qu'il contient des objets
        if (!Array.isArray(courseStats) || courseStats.length === 0) {
            console.error("Les données ne sont pas dans le bon format ou sont vides.", courseStats);
            // Afficher un graphique vide si les données sont invalides
            afficherGraphiqueVide();
            return;
        }

        // Utiliser un objet pour accumuler le nombre d'étudiants par mois
        const monthData = {};

        // Mois de l'année pour les abscisses (1 = janvier, 2 = février, ..., 12 = décembre)
        const allMonths = Array.from({ length: 12 }, (_, i) => i + 1);

        // Initialiser le moisData avec 0 pour chaque mois
        allMonths.forEach(month => {
            monthData[month] = 0;
        });

        // Accumuler les données pour chaque mois
        courseStats.forEach(stat => {
            const month = stat.month;
            if (monthData[month] !== undefined) {
                monthData[month] += stat.studentCount;
            }
        });

        // Tableau des noms des mois
        const monthNames = [
            "Janvier", "Février", "Mars", "Avril", "Mai", "Juin",
            "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"
        ];

        // Extraire les labels (mois uniques) et les données (nombre total d'étudiants pour chaque mois)
        const labels = monthNames; // Tous les mois de l'année
        const data = allMonths.map(month => monthData[month]); // Données correspondant aux mois

        console.log("Labels:", labels);  // Affichez les labels pour vérifier
        console.log("Data:", data);  // Affichez les données pour vérifier

        // Si aucune donnée n'est présente, afficher un graphique vide
        if (data.every(value => value === 0)) {
            afficherGraphiqueVide();
            return;
        }

        // Créer un graphique avec Chart.js
        const container = document.getElementById('chartContainer');
        container.innerHTML = ''; // Supprimer le graphique existant

        const canvas = document.createElement('canvas');
        container.appendChild(canvas);

        // Ajuster la taille du graphique (réduire sa largeur et hauteur)
        canvas.style.width = '80%';  // Largeur du graphique réduite à 80% du conteneur
        canvas.style.height = '300px';  // Hauteur du graphique réduite à 300px

        const ctx = canvas.getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,  // Utilise les noms des mois
                datasets: [{
                    label: 'Nombre d\'étudiants',
                    data: data,
                    backgroundColor: 'rgba(54, 162, 235, 0.5)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true, // Commence à zéro
                        ticks: {
                            stepSize: 1, // Assurer que les ticks de l'axe Y sont des entiers
                            precision: 0  // Précision des ticks (entiers)
                        }
                    },
                    x: {
                        ticks: {
                            autoSkip: false // Ne pas sauter les mois même si aucun étudiant n'est inscrit
                        }
                    }
                }
            }
        });
    };

    // Fonction pour afficher un graphique vide
    function afficherGraphiqueVide() {
        const container = document.getElementById('chartContainer');
        container.innerHTML = ''; // Vider le conteneur

        const canvas = document.createElement('canvas');
        container.appendChild(canvas);

        // Ajuster la taille du graphique (réduire sa largeur et hauteur)
        canvas.style.width = '80%';  // Largeur du graphique réduite à 80% du conteneur
        canvas.style.height = '300px';  // Hauteur du graphique réduite à 300px

        const ctx = canvas.getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: [],  // Aucun label
                datasets: [{
                    label: 'Nombre d\'étudiants',
                    data: [],  // Pas de données
                    backgroundColor: 'rgba(0, 0, 0, 0.1)', // Gris clair pour représenter un vide
                    borderColor: 'rgba(0, 0, 0, 0.1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true, // Commence à zéro
                        ticks: {
                            stepSize: 1,
                            precision: 0
                        }
                    },
                    x: {
                        ticks: {
                            autoSkip: false
                        }
                    }
                }
            }
        });
    }

</script>





























@code {
    private List<CourseStats>? courseStats;

    protected override async Task OnInitializedAsync()
    {
        // Récupérer l'ID de l'enseignant connecté
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var enseignantId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            // Appeler le service pour récupérer les statistiques
            if (!string.IsNullOrEmpty(enseignantId))
            {
                courseStats = await CoursService.GetStudentEnrollmentsByTeacherAsync(enseignantId);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("afficherGraphique", courseStats);

        }
    }

   
   

}

@page "/cours/etudiant/exam"
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IExamenService ExamenService
@inject ISoumissionService SoumissionService
@inject NavigationManager NavigationManager
@inject ICertificatService CertificatService
<div class="dashboard-body">
	<div class="card mt-24">
		<div class="card-body">
			@if(examen != null){
				<h5>Examen: @examen.Cours.Nom</h5>
				int i=1;
				@foreach(var q in examen.Questions){
					int k=i;
					<ExamQustion @ref="refQ" question="q" questionNb="k"/>
					i++;
				}
			}
			<div class="flex-align justify-content-end gap-8">
				<button @onclick="submit" type="button" class="btn btn-outline-main rounded-pill py-9">Submit</button>
			</div>
			@if (!string.IsNullOrEmpty(message))
			{
				<div class="text-danger text-sm text-end">@message</div>
			}
		</div>
	</div>
</div>
@code {
	[SupplyParameterFromQuery] public int? coursId { get; set; }
	private Examen examen;
	public int finalScore = 0;
	public string EtudiantId;
	ExamQustion refQ {
		set {
			examQustions.Add(value);
		}
	}
	private string message = "";
	List<ExamQustion> examQustions = new List<ExamQustion>(); 
	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(100);
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity.IsAuthenticated)
		{
			EtudiantId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
		}
		if (coursId != null && !string.IsNullOrEmpty(EtudiantId))
		{
			examen = await ExamenService.GetByCoursIdAsync(coursId.Value);
		}
	}
	private async Task submit(){
		message = "";
		int score = 0;
		foreach(var eq in examQustions){
			if(eq.choix == null){
				message = "il faut repondre a tous les questions";
				return;
			}
			score += eq.Check();
		}
		finalScore = (score * 100) / examQustions.Count();
		Soumission soumission = new Soumission() { EtudiantId = EtudiantId, DateSoumission = DateTime.UtcNow, ExamenId = examen.Id, Note = finalScore };
		await SoumissionService.AddAsync(soumission);
		if(finalScore == 100){
			Certificat certificat = await CertificatService.GetByEtudiantIdCoursIdAsync(EtudiantId, examen.CoursId);
			if(certificat==null){
				certificat = new Certificat() { CoursId = examen.CoursId, DateObtention = DateTime.UtcNow, EtudiantId = EtudiantId };
				await CertificatService.AddAsync(certificat);
			}
		}
		string link = NavigationManager.GetUriWithQueryParameters(
				NavigationManager.ToAbsoluteUri("/etudiant/examen/soumission").AbsoluteUri,
				new Dictionary<string, object?> { ["examId"] = examen.Id });
		NavigationManager.NavigateTo(link);
	}
}

@page "/etudiant/examen/soumission"
@inject ISoumissionService SoumissionService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IExamenService ExamenService
@inject ICertificatService CertificatService
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@if (soumissions != null && examen != null)
{
    <div class="dashboard-body">
        <!-- Breadcrumb Start -->
        <div class="breadcrumb mb-0">
            <ul class="flex-align gap-4">
                <li><a href="/" class="text-gray-200 fw-normal text-15 hover-text-main-600">Accueil</a></li>
                <li> <span class="text-gray-500 fw-normal d-flex"><i class="ph ph-caret-right"></i></span> </li>
                <li><span class="text-main-600 fw-normal text-15">dernières soumissions</span></li>
            </ul>
        </div>
        <div class="row">
            <div class="col-sm-8">
                <div class="card mt-24">
                    <div class="card-body">
                        <h5>Vos dernières soumissions : @examen.Cours.Nom</h5>

                        <table class="table">
                            <thead>
                                <tr>
                                    <th scope="col">Date de soumission</th>
                                    <th scope="col">Note</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (soumissions != null && soumissions.Any())
                                {
                                    @foreach (var soumission in soumissions)
                                    {
                                        <tr scope="row">
                                            <td>@soumission.DateSoumission.ToString("dd/MM/yyyy HH:mm")</td>
                                            <td>@soumission.Note</td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr scope="row">
                                        <td colspan="2" class="text-center">Aucune soumission disponible.</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="flex-align gap-8">
                            <button @onclick="refaire" type="button" class="btn btn-outline-main rounded-pill py-9">Refaire</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-4">
                <div class="card mt-24">
                    <div class="card-body">
                        <div class="flex-align justify-content-center gap-8">
                            @if (certificat != null)
                            {
                                <button @onclick="goToCertificat" type="button" class="btn btn-success rounded-8 py-9">Télécharger votre certificat</button>
                            }
                            else
                            {
                                <button type="button" class="btn disabled btn-danger rounded-8 py-9">Vous n'avez pas de certificat</button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@code {
    [SupplyParameterFromQuery] public int examId { get; set; }
    public string EtudiantId;
    Examen examen;
    List<Soumission> soumissions = new();
    Certificat? certificat;
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(100);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            EtudiantId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
        if (EtudiantId != null && examId != null)
        {
            soumissions = await SoumissionService.GetByEtudiantAndExamenIdAsync(EtudiantId, examId);
            examen = await ExamenService.GetByIdAsync(examId);
        }
        certificat = await CertificatService.GetByEtudiantIdCoursIdAsync(EtudiantId, examen.CoursId);
    }
    private async Task refaire()
    {
        string link = NavigationManager.GetUriWithQueryParameters(
       NavigationManager.ToAbsoluteUri("cours/etudiant/exam").AbsoluteUri,
       new Dictionary<string, object?> { ["coursId"] = examen.Cours.Id });
        NavigationManager.NavigateTo(link);
    }
    private async Task goToCertificat()
    {
        string link = NavigationManager.GetUriWithQueryParameters(
      NavigationManager.ToAbsoluteUri("etudiant/certificat").AbsoluteUri,
      new Dictionary<string, object?> { ["certificatId"] = certificat?.Id });
        NavigationManager.NavigateTo(link);
    }
}
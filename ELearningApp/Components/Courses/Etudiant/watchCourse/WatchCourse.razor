@page "/courses/etudiant/watch"
@inject ICoursCommenceService CoursCommenceService
@rendermode InteractiveServer 
@inject IJSRuntime JSRuntime
@inject ICloudinaryService CloudinaryService
@inject ICommentaireVideoService CommentaireVideoService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@if(coursCommence != null){
    <div class="dashboard-body">
        <!-- Breadcrumb Start -->
        <div class="breadcrumb mb-24">
            <ul class="flex-align gap-4">
                <li><a href="index.html" class="text-gray-200 fw-normal text-15 hover-text-main-600">Home</a></li>
                <li> <span class="text-gray-500 fw-normal d-flex"><i class="ph ph-caret-right"></i></span> </li>
                <li><span class="text-main-600 fw-normal text-15">Course Details</span></li>
            </ul>
        </div>
        <!-- Breadcrumb End -->

        <div class="row gy-4">
            <div class="col-md-8">
                <div class="rounded-16 overflow-hidden position-relative">
                    <video @ref="videoElement" @onended="changeProgress" id="player" class="player" playsinline controls data-poster="@videoimgUrl">
                        <source src="@videoUrl" type="video/mp4">
                    </video>
                </div>
                <!-- Course Card Start -->
                <div class="card mt-24">
                    <div class="card-body">
                        <div class="pb-8 flex-between gap-4 flex-wrap">
                            <h5 class="mb-12 fw-bold">Commentaires (@commentairesVideo.Count())</h5>
                            <button @onclick="()=>{seeAll=!seeAll;}" class="btn btn-outline-gray text-gray-500 text-13 py-8 px-8 rounded-4">@(seeAll? "show less": "show All")</button>
                        </div>

                        <ul class="comment-list">
                            @{ int count = 0;}
                            @foreach(var cv in commentairesVideo){
                                if (!seeAll && count == 2) break;
                                <li class="mt-24">
                                    <div class="d-flex align-items-start gap-8 flex-xs-row flex-column">
                                        <img src="assets/images/thumbs/mentor-img1.png" alt="" class="w-48 h-48 rounded-circle object-fit-cover flex-shrink-0">
                                        <div class="">
                                            <div class="flex-align flex-wrap gap-8">
                                                <h6 class="text-15 fw-bold mb-0">@cv.Utilisateur.UserName</h6>
                                                @if (@cv.Utilisateur.Id == EtudiantId)
                                                {
                                                    <span class="py-0 px-8 bg-main-50 text-main-600 rounded-4 text-15 fw-medium h5 mb-0 fw-bold">You</span>
                                                }
                                                else if (@cv.Utilisateur.Id == coursCommence.Cours.Enseignant.Id)
                                                {
                                                    <span class="py-0 px-8 bg-main-50 text-main-600 rounded-4 text-15 fw-medium h5 mb-0 fw-bold">Mentor</span>
                                                }
                                                <span class="text-gray-300 text-13">@cv.TimeAgo()</span>
                                            </div>
                                            <p class="text-15 text-gray-600 mt-8">@cv.Contenu</p>
                                        </div>
                                    </div>
                                </li>
                                count++;
                            }
                        </ul>
                        <div class="position-relative mt-44">
                            <input @bind="commentInput" type="text" class="form-control bg-main-50 border-0 py-18 pe-54" placeholder="Drop your questions here...">
                            <button @onclick="addComment" class="w-40 h-40 flex-center rounded-8 bg-white text-main-600 hover-bg-main-600 hover-text-white transition-1 position-absolute inset-inline-end-0 top-50 translate-middle-y me-8">
                                <i class="ph ph-paper-plane-tilt"></i>
                            </button>
                        </div>


                    </div>
                </div>
                <!-- Course Card End -->
            </div>

            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <div class="flex-between flex-wrap mb-12">
                            <h5 class="mb-0 fw-bold">Your Lesson</h5>
                            <span class="text-13">@coursCommence.nbWatchedVid/@coursCommence.Cours.nbVids</span>
                        </div>
                        <div class="flex-align gap-8 mb-12">
                            <span class="text-main-600 flex-shrink-0 text-13 fw-medium">@coursCommence.Progres%</span>
                            <div class="progress w-100  bg-main-100 rounded-pill h-4" role="progressbar" aria-label="Basic example" aria-valuenow="32" aria-valuemin="0" aria-valuemax="100">
                                <div class="progress-bar bg-main-600 rounded-pill" style="width: @coursCommence.Progres%"></div>
                            </div>
                        </div>
                        <ul class="lesson-list">
                            @{
                                double i = 0;
                            }
                            @foreach(var s in coursCommence.Cours.sections){
                                @foreach (var vid in s.Videos){
                                    double k = i+vid.Duree;
                                    <li class="lesson-list__item d-flex align-items-start gap-16 @(k<=lastVidDur ? "active":"")">
                                        <span class="circle w-16 h-16 flex-center rounded-circle text-main-100 text-13 flex-shrink-0">
                                            <i class="ph-fill ph-check-circle"></i>
                                        </span>
                                        <div>
                                            @if (k <= lastVidDur || k - vid.Duree <= lastVidDur)
                                            {
                                                <button @onclick="()=>startVideo(vid,k)" class="text-13 text-heading d-block text-gray-600 fw-medium hover-text-main-600">
                                                    @s.Title : @vid.Title.Replace(".mp4","")
                                                </button>
                                            }else {
                                                <button class="text-13 text-heading d-block text-gray-600 fw-medium hover-text-main-600">
                                                    @s.Title : @vid.Title.Replace(".mp4", "")
                                                    <span class="text-13 text-heading text-start d-block text-gray-600 fw-medium">Locked</span>
                                                </button>
                                            }
                                        </div>
                                    </li>
                                    i+=k;
                                }
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script defer>
        new Plyr('#player');
        window.reloadVideo = (video) => {
        video.pause();
        video.load();
        };
    </script>
}
@code {
    [SupplyParameterFromQuery]
    private int? coursCommenceId { get; set; }
    private CoursCommence? coursCommence;
    private ElementReference videoElement;
    private string videoUrl = "";
    private string videoimgUrl = "";
    private double currentVidDur;
    private Video currentVid;
    private double lastVidDur;
    string? EtudiantId = "";
    private string commentInput = string.Empty;
    IEnumerable<CommentaireVideo> commentairesVideo = new List<CommentaireVideo>();
    private bool seeAll = false;
    protected override async Task OnInitializedAsync()
    {
        if(coursCommenceId != null){
            coursCommence = await CoursCommenceService.GetByIdAsync(coursCommenceId.Value);
            if(coursCommence!=null){
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;

                if (user.Identity.IsAuthenticated)
                {
                    EtudiantId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                }
                if(coursCommence.EtudiantId==EtudiantId){
                    lastVidDur = (coursCommence.Progres * coursCommence.Cours.Duree) / 100;
                    Video video = coursCommence.Cours.sections.First().Videos.First();
                    currentVid = video;
                    string publicID = video.VidPublicId;
                    videoUrl = await CloudinaryService.TransformVid(publicID, 849, 445);
                    videoimgUrl = videoUrl.Remove(videoUrl.Length-3)+"jpg";
                    currentVidDur = video.Duree;
                    commentairesVideo =( await CommentaireVideoService.GetByVideoIdAsync(video.Id.Value)).OrderByDescending(c=>c.DateCreation);
                }else {
                    NavigationManager.NavigateTo("/");
                }
            }else {
                NavigationManager.NavigateTo("/");
            }
        }
    }
    private async Task startVideo(Video vid, double i)
    {
        videoUrl = await CloudinaryService.TransformVid(vid.VidPublicId,849,445);
        videoimgUrl = videoUrl.Remove(videoUrl.Length - 3) + "jpg";
        commentairesVideo = (await CommentaireVideoService.GetByVideoIdAsync(vid.Id.Value)).OrderByDescending(c => c.DateCreation);
        currentVidDur = i;
        currentVid = vid;
        await Task.Delay(100);
        await JSRuntime.InvokeVoidAsync("reloadVideo", videoElement);
    }
    private async Task changeProgress(){
        if (lastVidDur < currentVidDur)
        {
            lastVidDur = currentVidDur;
            coursCommence!.Progres = (int)((lastVidDur * 100) / coursCommence.Cours.Duree);
            coursCommence!.nbWatchedVid++;
            await CoursCommenceService.UpdateAsync(coursCommence);
        }
    }
    private async Task addComment(){
        Console.WriteLine(DateTime.UtcNow.ToUniversalTime());
        if (!string.IsNullOrWhiteSpace(commentInput)){
            CommentaireVideo commentaireVideo = new CommentaireVideo()
                {
                    Contenu = commentInput,
                    DateCreation = DateTime.UtcNow,
                    UtilisateurId = EtudiantId,
                    VideoId = (int) currentVid.Id!
                };
            await CommentaireVideoService.CreateAsync(commentaireVideo);
            commentairesVideo = commentairesVideo.Append(commentaireVideo).OrderByDescending(c => c.DateCreation);
            commentInput = string.Empty;
            StateHasChanged();
        }
    }
}
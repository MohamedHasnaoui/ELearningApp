@page "/courses/etudiant/watch"
@inject ICoursCommenceService CoursCommenceService
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject ICloudinaryService CloudinaryService
@inject ICommentaireVideoService CommentaireVideoService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IRatingService RatingService
@inject ICoursService CoursService
@inject ICertificatService CertificatService
<style>
    .star {
        font-size: 2rem;
        cursor: pointer;
        transition: color 0.2s ease-in-out;
    }

    .text-warning {
        color: #ffc107 !important; /* Yellow for selected stars */
    }

    .text-muted {
        color: #ddd !important; /* Gray for unselected stars */
    }

    .star:hover ~ .star {
        color: #ffc107 !important;
    }

    .star:hover {
        color: #ffc107 !important;
    }
</style>

@if (coursCommence != null && commentairesVideo != null)
{
    <div class="dashboard-body">
        <!-- Breadcrumb Start -->
        <div class="breadcrumb mb-24">
            <ul class="flex-align gap-4">
                <li><NavLink href="/" class="text-gray-200 fw-normal text-15 hover-text-main-600">Accueil</NavLink></li>
                <li> <span class="text-gray-500 fw-normal d-flex"><i class="ph ph-caret-right"></i></span> </li>
                <li><span class="text-main-600 fw-normal text-15">Regarder le cours</span></li>
            </ul>
        </div>
        <!-- Breadcrumb End -->

        <div class="row gy-4">
            <div class="col-md-8">
                <div class="rounded-16 overflow-hidden position-relative">
                    <video @ref="videoElement" @onended="changeProgress" id="player" class="player" playsinline controls data-poster="@videoimgUrl">
                        <source src="@videoUrl" type="video/mp4">
                    </video>
                </div>
                <!-- Course Card Start -->
                <div class="card mt-24">
                    <div class="card-body">
                        <div class="pb-8 flex-between gap-4 flex-wrap">
                            <h5 class="mb-12 fw-bold">Commentaires (@commentairesVideo.Count())</h5>
                            <button @onclick="()=>{seeAll=!seeAll;}" class="btn btn-outline-gray text-gray-500 text-13 py-8 px-8 rounded-4">@(seeAll ? "Afficher moins" : "Afficher tout")</button>
                        </div>

                        <ul class="comment-list">
                            @{
                                int count = 0;
                            }
                            @foreach (var cv in commentairesVideo)
                            {
                                if (!seeAll && count == 2) break;
                                <li class="mt-24">
                                    <div class="d-flex align-items-start gap-8 flex-xs-row flex-column">
                                        <img src="assets/images/thumbs/mentor-img1.png" alt="" class="w-48 h-48 rounded-circle object-fit-cover flex-shrink-0">
                                        <div class="">
                                            <div class="flex-align flex-wrap gap-8">
                                                <h6 class="text-15 fw-bold mb-0">@cv.Utilisateur.UserName</h6>
                                                @if (@cv.Utilisateur.Id == EtudiantId)
                                                {
                                                    <span class="py-0 px-8 bg-main-50 text-main-600 rounded-4 text-15 fw-medium h5 mb-0 fw-bold">Vous</span>
                                                }
                                                else if (@cv.Utilisateur.Id == coursCommence.Cours.Enseignant.Id)
                                                {
                                                    <span class="py-0 px-8 bg-main-50 text-main-600 rounded-4 text-15 fw-medium h5 mb-0 fw-bold">Mentor</span>
                                                }
                                                <span class="text-gray-300 text-13">@cv.TimeAgo()</span>
                                            </div>
                                            <p class="text-15 text-gray-600 mt-8">@cv.Contenu</p>
                                        </div>
                                    </div>
                                </li>
                                count++;
                            }
                        </ul>
                        <div class="position-relative mt-44">
                            <input @bind="commentInput" type="text" class="form-control bg-main-50 border-0 py-18 pe-54" placeholder="Posez vos questions ici...">
                            <button @onclick="addComment" class="w-40 h-40 flex-center rounded-8 bg-white text-main-600 hover-bg-main-600 hover-text-white transition-1 position-absolute inset-inline-end-0 top-50 translate-middle-y me-8">
                                <i class="ph ph-paper-plane-tilt"></i>
                            </button>
                        </div>


                    </div>
                </div>
                <!-- Course Card End -->
            </div>

            <div class="col-md-4">
                <div class="card mb-8">
                    <div class="card-body">
                        <h4 class="text-center mb-0">Évaluer ce cours</h4>
                        <div class="star-rating d-flex align-center justify-content-center">
                            @for (int j = 5; j > 0; j--)
                            {
                                int r = j;
                                <span class="star @(r <= CurrentRating ? " text-warning" : "text-muted")" @onclick="() => SetRating(r)">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16">
                                        <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                                    </svg>
                                </span>
                            }
                            <span class="text-danger ms-20 cursor-pointer flex-align align-bottom pt-5" @onclick="() => SetRating(0)">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-x-circle" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708" />
                                </svg>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="card">
                    <div class="card-body">
                        <div class="flex-between flex-wrap mb-12">
                            <h5 class="mb-0 fw-bold">Vos leçons</h5>
                            <span class="text-13">@coursCommence.nbWatchedVid/@coursCommence.Cours.nbVids</span>
                        </div>
                        <div class="flex-align gap-8 mb-12">
                            <span class="text-main-600 flex-shrink-0 text-13 fw-medium">@coursCommence.Progres%</span>
                            <div class="progress w-100  bg-main-100 rounded-pill h-4" role="progressbar" aria-label="Basic example" aria-valuenow="32" aria-valuemin="0" aria-valuemax="100">
                                <div class="progress-bar bg-main-600 rounded-pill" style="width: @coursCommence.Progres%"></div>
                            </div>
                        </div>
                        <ul class="lesson-list">
                            @{
                                double i = 0;
                            }
                            @foreach (var s in coursCommence.Cours.sections)
                            {
                                @foreach (var vid in s.Videos)
                                {
                                    double k = i + vid.Duree;
                                    <li class="lesson-list__item d-flex align-items-start gap-16 @((int)k<=(int)lastVidDur ? "active":"")">
                                        <span class="circle w-16 h-16 flex-center rounded-circle text-main-100 text-13 flex-shrink-0">
                                            <i class="ph-fill ph-check-circle"></i>
                                        </span>
                                        <div>
                                            @if ((int)k <= (int)lastVidDur || (int)(k - vid.Duree) <= (int)lastVidDur)
                                            {
                                                <button @onclick="()=>startVideo(vid,k)" class="text-13 text-heading d-block text-gray-600 fw-medium hover-text-main-600 ">
                                                    @s.Title : @vid.Title.Replace(".mp4", "")
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="text-13 text-heading d-block text-gray-600 fw-medium hover-text-main-600">
                                                    @s.Title : @vid.Title.Replace(".mp4", "")
                                                    <span class="text-13 text-heading text-start d-block text-gray-600 fw-medium">Verrouillé</span>
                                                </button>
                                            }
                                        </div>
                                    </li>
                                    i = k;
                                }
                            }
                            <li class="lesson-list__item d-flex align-items-center gap-16 @(certificat!=null ? "active":"")">
                                <span class="circle w-16 h-16 flex-center rounded-circle text-main-100 text-13 flex-shrink-0">
                                    <i class="ph-fill ph-check-circle"></i>
                                </span>
                                <div>
                                    @if (coursCommence.Progres == 100)
                                    {
                                        <button @onclick="NavigateToExam" class="text-13 text-heading d-block text-gray-600 fw-medium hover-text-main-600">
                                            Examen Final
                                        </button>
                                        <button @onclick="NavigateToSubnissions" class="text-13 text-heading d-block text-gray-600 fw-medium hover-text-main-600">Voir historique des soumissions</button>
                                    }
                                    else
                                    {
                                        <button class="text-13 text-heading d-block text-gray-600 fw-medium hover-text-main-600">
                                            Examen Final
                                            <span class="text-13 text-heading text-start d-block text-gray-600 fw-medium">Verrouillé</span>
                                        </button>
                                    }
                                </div>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script defer>
        new Plyr('#player');
        window.reloadVideo = (video) => {
        video.pause();
        video.load();
        };
    </script>
}
@code {
    [SupplyParameterFromQuery]
    private int? coursCommenceId { get; set; }
    private CoursCommence? coursCommence;
    private ElementReference videoElement;
    private string videoUrl = "";
    private string videoimgUrl = "";
    private double currentVidDur;
    private Video currentVid;
    private double lastVidDur;
    string? EtudiantId = "";
    private string commentInput = string.Empty;
    IEnumerable<CommentaireVideo> commentairesVideo = new List<CommentaireVideo>();
    private bool seeAll = false;
    public int CurrentRating = 0;
    Certificat? certificat;
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(100);
        if (coursCommenceId != null)
        {
            coursCommence = await CoursCommenceService.GetByIdAsync(coursCommenceId.Value);
            if (coursCommence != null)
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;

                if (user.Identity.IsAuthenticated)
                {
                    EtudiantId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                }
                if (coursCommence.EtudiantId == EtudiantId)
                {
                    lastVidDur = (coursCommence.Progres * coursCommence.Cours.Duree) / 100;
                    Video video = coursCommence.Cours.sections.First().Videos.First();
                    currentVid = video;
                    string publicID = video.VidPublicId;
                    videoUrl = await CloudinaryService.TransformVid(publicID, 849, 445);
                    videoimgUrl = videoUrl.Remove(videoUrl.Length - 3) + "jpg";
                    currentVidDur = video.Duree;
                    commentairesVideo = (await CommentaireVideoService.GetByVideoIdAsync(video.Id.Value)).OrderByDescending(c => c.DateCreation);
                }
                else
                {
                    NavigationManager.NavigateTo("/");
                }
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
        if (await RatingService.RatingExisteAsync(coursCommence.Cours.Id, EtudiantId))
        {
            CurrentRating = (await RatingService.ObtenirRatingAsync(coursCommence.Cours.Id, EtudiantId)).Valeur;
        }
        certificat =  await CertificatService.GetByEtudiantIdCoursIdAsync(EtudiantId, coursCommence!.Cours.Id);

    }
    private async Task startVideo(Video vid, double i)
    {
        videoUrl = await CloudinaryService.TransformVid(vid.VidPublicId,849,445);
        videoimgUrl = videoUrl.Remove(videoUrl.Length - 3) + "jpg";
        commentairesVideo = (await CommentaireVideoService.GetByVideoIdAsync(vid.Id.Value)).OrderByDescending(c => c.DateCreation);
        currentVidDur = i;
        currentVid = vid;
        await Task.Delay(100);
        await JSRuntime.InvokeVoidAsync("reloadVideo", videoElement);
    }
    private async Task changeProgress(){
        if (lastVidDur < currentVidDur)
        {
            lastVidDur = currentVidDur;
            coursCommence!.Progres = (int)((lastVidDur * 100) / coursCommence.Cours.Duree);
            if (coursCommence!.Progres > 97) {
                coursCommence!.Progres = 100;
                coursCommence.DateFin = DateTime.UtcNow;
            }
            coursCommence!.nbWatchedVid++;
            await CoursCommenceService.UpdateAsync(coursCommence);
        }
    }
    private async Task addComment(){
        Console.WriteLine(DateTime.UtcNow.ToUniversalTime());
        if (!string.IsNullOrWhiteSpace(commentInput)){
            CommentaireVideo commentaireVideo = new CommentaireVideo()
                {
                    Contenu = commentInput,
                    DateCreation = DateTime.UtcNow,
                    UtilisateurId = EtudiantId,
                    VideoId = (int) currentVid.Id!
                };
            await CommentaireVideoService.CreateAsync(commentaireVideo);
            commentairesVideo = (await CommentaireVideoService.GetByVideoIdAsync(currentVid.Id.Value)).OrderByDescending(c => c.DateCreation);
            commentInput = string.Empty;
            StateHasChanged();
        }
    }



    private async Task SetRating(int rating)
    {
        CurrentRating = rating;
        if (await RatingService.RatingExisteAsync(coursCommence!.Cours.Id, EtudiantId))
        {
            await RatingService.MettreAJourRatingAsync(coursCommence.Cours.Id, EtudiantId, CurrentRating);
        }else {
            await RatingService.AjouterRatingAsync(coursCommence.Cours.Id, EtudiantId, CurrentRating);
        }
        coursCommence.Cours.Evaluation = await RatingService.ObtenirMoyennePourCoursAsync(coursCommence.Cours.Id);
        Cours cours = coursCommence.Cours;
        await CoursService.UpdateAsync(cours);
        StateHasChanged();
    }

    private async Task NavigateToExam(){
        string link = NavigationManager.GetUriWithQueryParameters(
           NavigationManager.ToAbsoluteUri("cours/etudiant/exam").AbsoluteUri,
           new Dictionary<string, object?> { ["coursId"] = coursCommence?.Cours.Id });
        NavigationManager.NavigateTo(link);
    }
    private async Task NavigateToSubnissions(){
        string link = NavigationManager.GetUriWithQueryParameters(
        NavigationManager.ToAbsoluteUri("/etudiant/examen/soumission").AbsoluteUri,
        new Dictionary<string, object?> { ["examId"] = coursCommence.Cours.Examen.Id });
        NavigationManager.NavigateTo(link);
    }
}
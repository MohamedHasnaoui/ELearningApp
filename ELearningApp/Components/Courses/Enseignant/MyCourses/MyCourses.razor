@page "/courses/enseignant/mycourses"
@inject ICoursService CoursService
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
<div class="dashboard-body">
    <!-- Breadcrumb Start -->
    <div class="breadcrumb mb-24">
        <ul class="flex-align gap-4">
            <li><a href="index.html" class="text-gray-200 fw-normal text-15 hover-text-main-600">Home</a></li>
            <li> <span class="text-gray-500 fw-normal d-flex"><i class="ph ph-caret-right"></i></span> </li>
            <li><span class="text-main-600 fw-normal text-15">Mentor Courses</span></li>
        </ul>
    </div>
    <!-- Breadcrumb End -->
    <!-- Recommended Course Start -->
    <div class="card mt-24">
        <div class="card-body">
            <div class="mb-20 flex-between flex-wrap gap-8">
                <h4 class="mb-0">My courses</h4>
                <NavLink href="/courses/Enseignant/create" class="btn btn-main rounded-pill py-7 flex-align gap-4 fw-normal">
                    <span class="d-flex text-md"><i class="ph ph-plus"></i></span>
                    Create New Course
                </NavLink>
            </div>
            <div class="row g-20">
                @foreach(var c in courses){
                    <CourseCard Refrech="Refrech" categoryStyle="@categoryStyle[count++%5]" coursimg="@c.CoursImg" coursId="@c.Id" Category="@c.Category.Name" CoursTitle="@c.Nom" Duree="@c.FormatDuration()" Rating="@c.Evaluation" />
                }
            </div>

            <div class="flex-between flex-wrap gap-8 mt-20">
                <button @onclick="async()=>await move(-1)" disabled="@(currentnbPage = 1)" class="btn btn-outline-gray rounded-pill py-9 flex-align gap-4">
                    <span class="d-flex text-xl"><i class="ph ph-arrow-left"></i></span>
                    Previous
                </button>
                <ul class="pagination flex-align flex-wrap">
                    <li class="page-item active">
                        <button class="page-link h-44 w-44 flex-center text-15 rounded-8 fw-medium">@currentnbPage</button>
                    </li>
                </ul>
                <button @onclick="async()=>await move(1)" disabled="@(currentnbPage >= pageNbs)" class="btn btn-outline-main rounded-pill py-9 flex-align gap-4">
                    Next <span class="d-flex text-xl"><i class="ph ph-arrow-right"></i></span>
                </button>
            </div>
        </div>
    </div>
    <!-- Recommended Course End -->
</div>
@code {
    public ApplicationUser? AuthenticatedUser { get; set; }
    private IEnumerable<Cours> courses = new List<Cours>();
    private int currentnbPage = 1;
    private int count = 0;
    private int pageNbs;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            AuthenticatedUser = new ApplicationUser
                {
                    Id = user.FindFirst(ClaimTypes.NameIdentifier)?.Value
                };
        }
        @if (AuthenticatedUser != null)
        {
            courses = await CoursService.GetCoursByEnseignantIdAsync(AuthenticatedUser.Id, currentnbPage, 9);
            pageNbs = await CoursService.CountByEnseignantId(AuthenticatedUser.Id);
            pageNbs = (pageNbs - 1) / 9 + 1;
            Console.WriteLine("pages " + pageNbs);
        }else {
            Console.WriteLine("null");
        }
    }
    private async Task move(int i){
        Console.WriteLine("clicked");
        if ((i==1 && currentnbPage < pageNbs) ||(i==-1 && currentnbPage>1))
        {
            currentnbPage+=i;
            courses = await CoursService.GetCoursByEnseignantIdAsync(AuthenticatedUser.Id, currentnbPage, 9);
            await JSRuntime.InvokeVoidAsync("scrollToTop");
        }
    }
    private string[] categoryStyle = { "bg-purple-50 text-purple-600",
                                       "bg-success-50 text-success-600",
                                       "bg-warning-50 text-warning-600",
                                       "bg-info-50 text-info-600",
                                       "bg-danger-50 text-danger-600",
                                                              };
    private async Task Refrech(){
        courses = await CoursService.GetCoursByEnseignantIdAsync(AuthenticatedUser.Id, currentnbPage, 9);
        Console.WriteLine(courses.Count());
        StateHasChanged();
    }

}
<script>
    function scrollToTop() {
        window.scrollTo({ top: 0, behavior: 'smooth' }); // Smooth scroll to top
    }
</script>
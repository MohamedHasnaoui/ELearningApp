@rendermode InteractiveServer
@inject IExamenService ExamenService
<div class="breadcrumb-with-buttons mb-24 flex-between flex-wrap gap-8">
    <!-- Breadcrumb Start -->
    <div class="breadcrumb mb-24">
        <ul class="flex-align gap-4">
            <li><NavLink href="/" class="text-gray-200 fw-normal text-15 hover-text-main-600">Accueil</NavLink></li>
            <li> <span class="text-gray-500 fw-normal d-flex"><i class="ph ph-caret-right"></i></span> </li>
            <li><span class="text-main-600 fw-normal text-15">Créer un Examen</span></li>
        </ul>
    </div>
    <!-- Breadcrumb End -->
</div>

<!-- Create Course Step List Start -->
<ul class="step-list mb-24">
    <li class="step-list__item py-15 px-24 text-15 text-heading fw-medium flex-center gap-6 done ">
        <span class="icon text-xl d-flex"><i class="ph ph-circle"></i></span>
        Détails du Cours
        <span class="line position-relative"></span>
    </li>

    <li class="step-list__item py-15 px-24 text-15 text-heading fw-medium flex-center gap-6 done ">
        <span class="icon text-xl d-flex"><i class="ph ph-circle"></i></span>
        Détails des Sections
        <span class="line position-relative"></span>
    </li>
    <li class="step-list__item py-15 px-24 text-15 text-heading fw-medium flex-center gap-6 done ">
        <span class="icon text-xl d-flex"><i class="ph ph-circle"></i></span>
        Téléverser des Vidéos
        <span class="line position-relative"></span>
    </li>
    <li class="step-list__item py-15 px-24 text-15 text-heading fw-medium flex-center gap-6  active">
        <span class="icon text-xl d-flex"><i class="ph ph-circle"></i></span>
        Créer un Examen
        <span class="line position-relative"></span>
    </li>
    <li class="step-list__item py-15 px-24 text-15 text-heading fw-medium flex-center gap-6  ">
        <span class="icon text-xl d-flex"><i class="ph ph-circle"></i></span>
        Publier le Cours
        <span class="line position-relative"></span>
    </li>
</ul>
<!-- Create Course Step List End -->
<!-- Course Tab Start -->
<div class="card">
    <div class="card-header border-bottom border-gray-100 flex-between flex-wrap gap-8">
        <div class="flex-align gap-8 flex-wrap">
            <h5 class="mb-0">Questions de l'Examen</h5>
            <button type="button" class="text-main-600 text-md d-flex" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Questions de l'Examen">
                <i class="ph-fill ph-question"></i>
            </button>
        </div>
        <!-- Button trigger modal -->
        <button type="button" @onclick="()=>{if(nbQuestions>0) nbQuestions--;}" class="btn text-bg-danger ms-auto rounded-pill py-8 px-20">
            Supprimer une Question
        </button>
        <button type="button" @onclick="()=>nbQuestions++" class="btn text-bg-secondary rounded-pill py-8 px-20">
            Ajouter une Question
        </button>
    </div>
    <div class="card-body">
        @for (int i = 1; i <= nbQuestions; i++)
        {
            <ExamQuetion @ref="qstRef" QuestionNb="i" />
        }
        <div class="flex-align justify-content-end gap-8">
            <button type="button" @onclick="HandleBackClick" @onclick:preventDefault class="btn btn-outline-main rounded-pill py-9">Retour</button>
            <button @onclick="handleContinueClique" @onclick:preventDefault class="btn btn-main rounded-pill py-9">Continuer</button>
        </div>
        @if (!string.IsNullOrEmpty(errorSaving))
        {
            <div class="text-danger text-sm text-end">@errorSaving</div>
        }
    </div>
</div>

@code {
    private int nbQuestions = 0;
    [Parameter]
    public EventCallback<int> OnContinueButtonClick { get; set; }
    [Parameter]
    public EventCallback<int> OnBackButtonClick { get; set; }
    private string errorSaving;
    List<ExamQuetion> qstList = new();
    ExamQuetion qstRef
    {
        set { qstList.Add(value); }
    }
    private async Task handleContinueClique()
    {
        errorSaving = null;
        if (nbQuestions == 0)
        {
            errorSaving = "Il faut avoir au moins une question.";
        }
        foreach (var qst in qstList)
        {
            var res = await qst.ValidateForm();
            if (!res)
            {
                errorSaving = "Il faut remplir toutes les questions.";
            }
        }
        StateHasChanged();
        if (string.IsNullOrEmpty(errorSaving))
        {
            await OnContinueButtonClick.InvokeAsync(3);
        }
    }
    private async Task HandleBackClick()
    {
        await OnBackButtonClick.InvokeAsync(3);
    }
    public async Task SaveToDateBase(int coursId)
    {
        Examen examen = new Examen() { CoursId = coursId, DateCreation = DateTime.UtcNow };
        await ExamenService.CreateAsync(examen);
        foreach (var qst in qstList)
        {
            await qst.SaveToDateBase(examen.Id);
        }
    }
}
<div class="breadcrumb-with-buttons mb-24 flex-between flex-wrap gap-8">
    <!-- Breadcrumb Start -->
    <div class="breadcrumb mb-24">
        <ul class="flex-align gap-4">
            <li><NavLink href="/" class="text-gray-200 fw-normal text-15 hover-text-main-600">Accueil</NavLink></li>
            <li> <span class="text-gray-500 fw-normal d-flex"><i class="ph ph-caret-right"></i></span> </li>
            <li><span class="text-main-600 fw-normal text-15">Téléverser des Vidéos</span></li>
        </ul>
    </div>
    <!-- Breadcrumb End -->
</div>

<!-- Create Course Step List Start -->
<ul class="step-list mb-24">
    <li class="step-list__item py-15 px-20 text-14 text-heading fw-medium flex-center gap-7  done">
        <span class="icon text-xl d-flex"><i class="ph ph-circle"></i></span>
        Détails du Cours
        <span class="line position-relative w-20"></span>
    </li>
    <li class="step-list__item py-15 px-20 text-14 text-heading fw-medium flex-center gap-7 done">
        <span class="icon text-xl d-flex"><i class="ph ph-circle"></i></span>
        Détails des Sections
        <span class="line position-relative w-20"></span>
    </li>
    <li class="step-list__item py-15 px-20 text-14 text-heading fw-medium flex-center gap-7 active ">
        <span class="icon text-xl d-flex"><i class="ph ph-circle"></i></span>
        Téléverser des Vidéos
        <span class="line position-relative w-20"></span>
    </li>
    <li class="step-list__item py-15 px-20 text-14 text-heading fw-medium flex-center gap-7  ">
        <span class="icon text-xl d-flex"><i class="ph ph-circle"></i></span>
        Créer un Quiz
        <span class="line position-relative w-20"></span>
    </li>
    <li class="step-list__item py-15 px-20 text-14 text-heading fw-medium flex-center gap-7  ">
        <span class="icon text-xl d-flex"><i class="ph ph-circle"></i></span>
        Publier le Cours
        <span class="line position-relative w-20"></span>
    </li>
</ul>
<!-- Create Course Step List End -->
<!-- Course Tab Start -->
<div class="card">
    <div class="card-header border-bottom border-gray-100 flex-align gap-8">
        <h5 class="mb-0">Téléverser des Vidéos</h5>
        <button type="button" class="text-main-600 text-md d-flex" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Téléverser des Vidéos">
            <i class="ph-fill ph-question"></i>
        </button>
    </div>
    <div class="card-body">
        <!-- Drop Course Videos Start -->
        @for (int i = 1; i <= numberSections; i++)
        {
            <Section_Video @ref="sectionVidRef" SectionNumber="i" />
        }
        <div class="flex-align justify-content-end gap-8 mt-20">
            <button type="button" @onclick="HandleBackClick" @onclick:preventDefault class="btn btn-outline-main rounded-pill py-9">Retour</button>
            <button type="button" @onclick="HandleContinueClick" @onclick:preventDefault class="btn btn-main rounded-pill py-9">Continuer</button>
        </div>
        @if (!string.IsNullOrEmpty(errorSaving))
        {
            <div class="text-danger text-sm text-end">@errorSaving</div>
        }
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<int> OnContinueButtonClick { get; set; }
    [Parameter]
    public EventCallback<int> OnBackButtonClick { get; set; }
    [Parameter] public int numberSections { get; set; }
    private string errorSaving;
    public List<Section_Video> sectionVids = new();
    Section_Video sectionVidRef
    {
        set { sectionVids.Add(value); }
    }
    private async Task HandleContinueClick()
    {
        errorSaving = null;
        foreach (var sectionVid in sectionVids)
        {
            if (sectionVid.Videos.Count() == 0)
            {
                errorSaving = "Pour chaque section, il faut ajouter au moins une vidéo.";
                return;
            }
        }
        await OnContinueButtonClick.InvokeAsync(2);
    }
    public async Task HandleBackClick()
    {
        await OnBackButtonClick.InvokeAsync(2);
    }
    public async Task<(double dureeTotal, int nbVid)> SaveToDateBase(List<Section> sections)
    {
        int i = 0;
        double dureeTotal = 0;
        int nbVid = 0;
        foreach (var section in sections)
        {
            try
            {
                dureeTotal += await sectionVids[i].SaveToDataBase(section.Id);
                nbVid += sectionVids[i].Videos.Count();
                i++;
            }
            catch (Exception e)
            {
            }
        }
        return (dureeTotal, nbVid);
    }
}
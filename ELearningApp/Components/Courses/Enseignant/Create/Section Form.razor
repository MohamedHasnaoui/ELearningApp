@rendermode InteractiveServer
@inject ISectionService SectionService
<div class="col-lg-6 col-sm-12 my-20">
    <h5 class="mb-4">Section @SectionNumber</h5>
    <div class="mb-3">
        <label for="sectionTitle_@SectionNumber" class="form-label">Titre de la Section</label>
        <input type="text" id="sectionTitle_@SectionNumber" class="form-control" placeholder="Entrez le titre de la section" @bind="sectionTitle" />
        @if (!string.IsNullOrEmpty(titleError))
        {
            <div class="text-danger">@titleError</div>
        }
    </div>
    <div class="mb-3">
        <label for="sectionDescription_@SectionNumber" class="form-label">Description de la Section</label>
        <textarea id="sectionDescription_@SectionNumber" class="form-control" placeholder="Entrez la description de la section" @bind="sectionDescription"></textarea>
        @if (!string.IsNullOrEmpty(descriptionError))
        {
            <div class="text-danger">@descriptionError</div>
        }
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="text-success mb-3">
                @successMessage
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public int SectionNumber { get; set; }
    [Parameter] public EventCallback<bool> OnSaveCompleted { get; set; }

    private string sectionTitle;
    private string sectionDescription;

    private string titleError;
    private string successMessage;
    private string descriptionError;

    public async Task<bool> HandleSave()
    {
        titleError = null;
        descriptionError = null;
        successMessage = null;

        if (string.IsNullOrEmpty(sectionTitle))
        {
            titleError = "Le titre est requis.";
        }
        if (string.IsNullOrEmpty(sectionDescription))
        {
            descriptionError = "La description est requise.";
        }
        StateHasChanged();
        if (!string.IsNullOrEmpty(titleError) || !string.IsNullOrEmpty(descriptionError))
        {
            return false;
        }
        return true;
    }

    public async Task<Section> SaveToDataBase(int coursId)
    {
        Section section = new Section() { CoursId = coursId, Description = sectionDescription, Title = sectionTitle };
        try
        {
            await SectionService.CreateAsync(section);
            return section;
        }
        catch (Exception e)
        {
            Console.WriteLine("Erreur lors de la sauvegarde de la section : {0}", e.Message);
        }
        return section;
    }
}
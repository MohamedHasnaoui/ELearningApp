@inject ICloudinaryService CloudinaryService
@inject IVideoService VideoService
@inject ISectionService SectionService
<div id="@("section" + SectionNumber)">
    <h4 class="my-20 mx-8">Section @SectionNumber</h4>
    <div class="upload-card-item p-16 rounded-12 bg-main-50 mb-20">
        <!-- Video Upload -->
        <div class="flex-align gap-10 flex-wrap">
            <span class="w-36 h-36 text-lg rounded-circle bg-white flex-center text-main-600 flex-shrink-0">
                <i class="ph-fill ph-video-camera"></i>
            </span>
            <div>
                <p class="text-15 text-gray-500">
                    Drag & drop your single/multiple videos of course, or
                    <label for="@("video" + SectionNumber)" class="text-main-600 cursor-pointer">Browse</label>
                    <InputFile OnChange="SetVideoFiles" id="@("video" + SectionNumber)" accept="video/mp4,video/x-m4v,video/*" multiple hidden />
                </p>
                <p class="text-13 text-gray-600">Mp4 format with 16:9 aspect ratio (max file size 100mb each)</p>
                @if (!string.IsNullOrEmpty(uploadingmsg))
                {
                    <p class="text-main-600 cursor-pointer">@uploadingmsg</p>
                }
            </div>
        </div>
    </div>

    @foreach (var vid in Videos)
    {
        <div class="upload-card-item p-16 rounded-12 bg-main-50 mb-20">
            <div class="flex-between flex-wrap gap-4">
                <div class="flex-align gap-10">
                    <img src="@vid.Thumbnail" alt="Thumbnail" class="w-88 h-56 rounded-8">
                    <div>
                        <p class="text-15 text-gray-500">@vid.Title</p>
                        <p class="text-13 text-gray-600">@vid.FormatDuration()</p>
                    </div>
                </div>

                <div class="flex-align gap-8">
                    <span class="text-main-600 d-flex text-xl"><i class="ph-fill ph-check-circle"></i></span>
                    <!-- Dropdown Start -->
                    <div class="dropdown flex-shrink-0">
                        <button class="text-gray-600 text-xl d-flex rounded-4" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="ph-fill ph-dots-three-outline"></i>
                        </button>
                        <div class="dropdown-menu dropdown-menu--md border-0 bg-transparent p-0">
                            <div class="card border border-gray-100 rounded-12 box-shadow-custom">
                                <div class="card-body p-12">
                                    <div class="max-h-200 overflow-y-auto scroll-sm pe-8">
                                        <ul>
                                            <li class="mb-0">
                                                <button type="button" @onclick="() => DeleteVideo(vid)"
                                                class="delete-item-btn py-6 text-15 px-8 hover-bg-gray-50 text-gray-300 w-100 rounded-8 fw-normal text-xs d-block text-start">
                                                    <span class="text">Delete</span>
                                                </button>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Dropdown end -->
                </div>
            </div>
        </div>
    }
</div>

@code {
    public string uploadingmsg = "";
    public List<Video> Videos { get; set; } = new();
    [Parameter] public int SectionNumber { get; set; }
    private async Task SetVideoFiles(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(); // Get all selected files
        uploadingmsg = "Uploading ... please wait";
        foreach (var file in files)
        {
            using var stream = file.OpenReadStream(maxAllowedSize: 100000000);
            var res = await CloudinaryService.UploadVideoAsync(stream, file.Name.Replace(".mp4", ""));


            Video videoModel = new Video()
                {
                    VidPublicId = res.PublicId,
                    Title = file.Name.Replace(".mp4",""),
                    Duree = res.Duration,
                    Thumbnail = res.SecureUrl.ToString().Remove(res.SecureUrl.ToString().Length - 3) + "jpg",
                    VideoUrl = res.SecureUrl.ToString()
                };

            Videos.Add(videoModel);
            StateHasChanged();
        }
        uploadingmsg = "Done";
    }

    private async void DeleteVideo(Video video)
    {
        Videos.Remove(video); // Remove the video from the list
        StateHasChanged(); // Update the UI
        await CloudinaryService.DeleteAsync(video.VidPublicId, CloudinaryDotNet.Actions.ResourceType.Video);
    }



    public async Task<Double> SaveToDataBase(int sectionId)
    {
        double dureeTotal = 0;
        foreach(var vid in Videos){
            vid.SectionId = sectionId;
            vid.Id = null;
            await VideoService.CreateAsync(vid);
            dureeTotal += vid.Duree;
        }
        Section s = await SectionService.GetByIdAsync(sectionId);
        s.Duree = dureeTotal;
        await SectionService.UpdateAsync(s);
        return dureeTotal;
    }
}

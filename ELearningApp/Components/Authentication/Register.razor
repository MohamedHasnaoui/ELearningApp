@page "/Register"
@layout Layout.MainLayoutAuhtentification

@using ELearningApp.Components.Account
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity.UI.Services
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@using System.Text.Encodings.Web

@rendermode InteractiveServer

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject ApplicationDbContext Context
@inject IEmailSender EmailSender
@inject IdentityRedirectManager RedirectManager


<PageTitle>Inscription</PageTitle>

<div class="auth-left bg-main-50 flex-center p-24">
    <img src="assets/images/thumbs/auth-img1.png" alt="">
</div>
<div class="auth-right py-40 px-24 flex-center flex-column">
    <div class="auth-right__inner mx-auto w-100">
        <a href="/courses/etudiant/decouvrir" class="auth-right__logo mb-10">
            <img src="assets/images/logo/logo.png" alt="">
        </a>
        <h2 class="mb-8">S'inscrire</h2>
        <p class="text-gray-600 text-15 mb-32">Veuillez vous inscrire à votre compte et commencer l'aventure</p>

        <EditForm Model="Input" OnValidSubmit="RegisterUser">
            <DataAnnotationsValidator />
            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="alert alert-danger" role="alert">
                    @Message
                </div>
            }
            @if (!string.IsNullOrEmpty(resultMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @resultMessage
                </div>
            }
            <div class="position-relative">
                <label for="userType" class="form-label mb-8 h6">Type d'utilisateur</label>
                <span class="position-absolute top-50 pt-30 translate-middle-y ms-16 text-gray-600 d-flex">
                    <i class="ph ph-user"></i>
                </span>
                <InputSelect @bind-Value="Input.UserType" class="form-control py-11 ps-40" id="userType">
                    <option value="Etudiant">Étudiant</option>
                    <option value="Enseignant">Enseignant</option>
                </InputSelect>
            </div>
            @if (Input.UserType == "Enseignant")
            {
                <div class="mb-24">
                    <label for="Input.Speciality" class="form-label mb-8 h6">Spécialité</label>
                    <div class="position-relative">
                        <InputText @bind-Value="Input.Speciality" id="Input.Speciality" class="form-control py-11 ps-40" placeholder="Spécialité" />
                        <span class="position-absolute top-50 translate-middle-y ms-16 text-gray-600 d-flex"><i class="ph ph-swatches"></i></span>
                    </div>
                    @if (formSubmitted && string.IsNullOrWhiteSpace(Input.Speciality))
                    {
                        <span class="text-danger">La spécialité est obligatoire pour les enseignants.</span>
                    }
                    <ValidationMessage For="() => Input.Speciality" class="text-danger" />
                </div>
            }

            <div class="mb-24">
                <label for="Input.UserName" class="form-label mb-8 h6">Nom d'utilisateur</label>
                <div class="position-relative">
                    <InputText @bind-Value="Input.UserName" id="Input.UserName" class="form-control py-11 ps-40" placeholder="nom d'utilisateur" />
                    <span class="position-absolute top-50 translate-middle-y ms-16 text-gray-600 d-flex"><i class="ph ph-user"></i></span>
                </div>
                <ValidationMessage For="() => Input.UserName" class="text-danger" />
            </div>
            <div class="mb-24">
                <label for="Input.Email" class="form-label mb-8 h6">Email</label>
                <div class="position-relative">
                    <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control py-11 ps-40" placeholder="nom@exemple.com" />
                    <span class="position-absolute top-50 translate-middle-y ms-16 text-gray-600 d-flex"><i class="ph ph-envelope"></i></span>
                </div>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="mb-24">
                <label for="current-password" class="form-label mb-8 h6">Mot de passe actuel</label>
                <div class="position-relative">
                    <InputText type="password" @bind-Value="Input.Password" id="current-password" class="form-control py-11 ps-40" placeholder="mot de passe" />
                    <span class="toggle-password position-absolute top-50 inset-inline-end-0 me-16 translate-middle-y ph ph-eye-slash"
                          id="toggle-password-current"
                          onclick="togglePasswordVisibility('current-password', 'toggle-password-current')"></span>
                    <span class="position-absolute top-50 translate-middle-y ms-16 text-gray-600 d-flex"><i class="ph ph-lock"></i></span>
                </div>
                <span class="text-gray-900 text-15 mt-4">Doit contenir au moins 8 caractères</span>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <button type="submit" @onclick="()=>formSubmitted=string.IsNullOrWhiteSpace(Input.Speciality)" class="btn btn-main rounded-pill w-100">S'inscrire</button>
            <p class="mt-32 text-gray-600 text-center">
                Vous avez déjà un compte ?
                <a href="/Login" class="text-main-600 hover-text-decoration-underline">Se connecter</a>
            </p>

            <div class="divider my-32 position-relative text-center">
                <span class="divider__text text-gray-600 text-13 fw-medium px-26 bg-white">ou</span>
            </div>

            <ul class="flex-align gap-10 flex-wrap justify-content-center">
                <li>
                    <a href="https://www.facebook.com" class="w-38 h-38 flex-center rounded-6 text-facebook-600 bg-facebook-50 hover-bg-facebook-600 hover-text-white text-lg">
                        <i class="ph-fill ph-facebook-logo"></i>
                    </a>
                </li>
                <li>
                    <a href="https://www.twitter.com" class="w-38 h-38 flex-center rounded-6 text-twitter-600 bg-twitter-50 hover-bg-twitter-600 hover-text-white text-lg">
                        <i class="ph-fill ph-twitter-logo"></i>
                    </a>
                </li>
                <li>
                    <a href="https://www.google.com" class="w-38 h-38 flex-center rounded-6 text-google-600 bg-google-50 hover-bg-google-600 hover-text-white text-lg">
                        <i class="ph ph-google-logo"></i>
                    </a>
                </li>
            </ul>

        </EditForm>
    </div>
</div>

<script>
    function togglePasswordVisibility(inputId, spanId) {
        const input = document.getElementById(inputId);
        const span = document.getElementById(spanId);

        if (input && span) {
            if (input.type === "password") {
                input.type = "text";
                span.classList.add("active");
            } else {
                input.type = "password";
                span.classList.remove("active");
            }
        }
    }
</script>

@code {
    private IEnumerable<IdentityError>? identityErrors;
    private InputModel Input { get; set; } = new InputModel();
    private string? Message => identityErrors is null ? null : $"Erreur : {string.Join(", ", identityErrors.Select(error => error.Description)).Replace("_", " ")}";
    private string? resultMessage = "";
    private string? ReturnUrl { get; set; } = "/";
    private bool formSubmitted = false;


    private sealed class InputModel
    {
        [Required(ErrorMessage = "Le nom d'utilisateur est obligatoire.")]
        [StringLength(50, ErrorMessage = "Le nom d'utilisateur doit comporter au moins {2} caractères et au maximum {1} caractères.", MinimumLength = 3)]
        [Display(Name = "Nom d'utilisateur")]
        public string UserName { get; set; } = "";

        [Required(ErrorMessage = "L'email est obligatoire.")]
        [EmailAddress(ErrorMessage = "L'email n'est pas valide.")]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Le mot de passe est obligatoire.")]
        [StringLength(100, ErrorMessage = "Le mot de passe doit comporter au moins {2} caractères et au maximum {1} caractères.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Mot de passe")]
        public string Password { get; set; } = "";


        [Required(ErrorMessage = "Veuillez sélectionner un type d'utilisateur.")]
        [Display(Name = "Type d'utilisateur")]
        public string UserType { get; set; } = "Etudiant";

        [Display(Name = "Spécialité")]
        public string? Speciality { get; set; }
    }

    public async Task RegisterUser()
    {
        var emailExists = await UserManager.FindByEmailAsync(Input.Email);
        resultMessage = "";
        if (emailExists != null)
        {
            resultMessage = "Cette adresse e-mail est déjà associée à un autre compte.";
            return;
        }
        ApplicationUser user;
        Console.WriteLine(Input.UserType);
        if (Input.UserType == "Etudiant")
        {
            user = new Etudiant();
        }
        else
        {
            user = new Enseignant
                {
                    speciality = Input.Speciality // Set the speciality for Enseignant
                };
        }

        user.FormalUserName = Input.UserName;
        await UserStore.SetUserNameAsync(user, Input.UserName.Replace(" ", "_"), CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        var result = await UserManager.CreateAsync(user, Input.Password);
        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }
        string role = Input.UserType == "Etudiant" ? "Etudiant" : "Enseignant";
        var roleResult = await UserManager.AddToRoleAsync(user, role);
        if (!roleResult.Succeeded)
        {
            foreach (var error in roleResult.Errors)
            {
                Console.WriteLine($"Erreur lors de l'attribution du rôle : {error.Description}");
            }
            return;
        }
        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        var email = Input.Email;
        var subject = "Vérification de l'email";
        var htmlMessage = GenerateEmailConfirmationMessage(HtmlEncoder.Default.Encode(callbackUrl), Input.UserName);
        await EmailSender.SendEmailAsync(email, subject, htmlMessage);

        NavigationManager.NavigateTo($"RegisterConfirmation?email={Uri.EscapeDataString(Input.Email)}&returnUrl={Uri.EscapeDataString(ReturnUrl)}");

    }
    public string GenerateEmailConfirmationMessage(string confirmationLink, string userName)
    {
        return $@"
    <html>
    <head>
        <style>
            body {{
                font-family: 'Arial', sans-serif;
                line-height: 1.6;
                color: #333;
                background-color: #f4f7fc;
                margin: 0;
                padding: 0;
                display: flex;
                justify-content: center;
                align-items: center;
                height: 100vh;
            }}
            .container {{
                max-width: 500px;
                background: #ffffff;
                padding: 30px;
                border-radius: 10px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            }}
            .header {{
                font-size: 24px;
                font-weight: bold;
                color: #1a73e8;
                margin-bottom: 15px;
            }}
            .description {{
                font-size: 16px;
                color: #555;
                margin-bottom: 20px;
            }}
            .button {{
                display: inline-block;
                padding: 12px 20px;
                font-size: 16px;
                color: #fff;
                background-color: #1a73e8;
                text-decoration: none;
                border-radius: 5px;
                transition: background-color 0.3s;
                margin-bottom: 15px;
            }}
            .button:hover {{
                background-color: #135ab4;
            }}
            .footer {{
                margin-top: 20px;
                font-size: 14px;
                color: #888;
            }}
            .footer a {{
                color: #1a73e8;
                text-decoration: none;
            }}
            .footer a:hover {{
                text-decoration: underline;
            }}
        </style>
    </head>
    <body>
        <div class='container'>
            <div class='header'>Bienvenue sur notre application, {userName} ! &#128075;</div>
            <div class='description'>Merci de vous être inscrit. Veuillez confirmer votre adresse e-mail en cliquant sur le bouton ci-dessous :</div>
            <a href='{confirmationLink}' class='button'>Confirmer l'email</a>
            <div class='description'>Si le bouton ci-dessus ne fonctionne pas, <a href='{confirmationLink}'>cliquez ici</a></div>
            <div class='footer'>
                <p>Si vous n'avez pas créé de compte, veuillez ignorer cet e-mail.</p>
            </div>
        </div>
    </body>
</html>";
    }


    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("L'interface utilisateur par défaut nécessite un magasin d'utilisateurs avec prise en charge des e-mails.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }
}
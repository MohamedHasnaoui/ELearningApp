@page "/ConfirmEmail"
@layout Layout.MainLayoutAuhtentification
@using System.Text
@using ELearningApp.Components.Account
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ELearningApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirmation de l'e-mail</PageTitle>

<div class="auth-left bg-main-50 flex-center p-24">
    <img src="assets/images/thumbs/auth-img1.png" alt="">
</div>
<div class="auth-right py-40 px-24 flex-center flex-column">
    <div class="auth-right__inner mx-auto w-100">
        <a href="/courses/etudiant/decouvrir" class="auth-right__logo">
            <img src="assets/images/logo/logo.png" alt="">
        </a>
        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="alert alert-danger" role="alert">
                @statusMessage
            </div>
            <a href="/Register" class="btn btn-main rounded-pill w-100">Aller à la réinscription</a>
        }
    </div>
</div>

@code {
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            Console.WriteLine("Utilisateur ou code nul");
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            Console.WriteLine("Erreur lors du chargement de l'utilisateur avec l'ID");
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = $"Erreur lors du chargement de l'utilisateur avec l'ID {UserId}";
        }
        else
        {
            Console.WriteLine("Confirmation de l'e-mail");
            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            var result = await UserManager.ConfirmEmailAsync(user, code);
            statusMessage = result.Succeeded ? "Merci d'avoir confirmé votre e-mail." : "Erreur lors de la confirmation de votre e-mail.";
            if (result.Succeeded)
            {
                RedirectManager.RedirectTo("/Login");
            }
        }
    }
}
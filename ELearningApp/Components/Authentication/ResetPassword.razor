@page "/ResetPassword"
@layout Layout.MainLayoutAuhtentification
@using System.ComponentModel.DataAnnotations
@using System.Text
@using ELearningApp.Components.Account
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ELearningApp.Data

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Reset password</PageTitle>
<div class="auth-left bg-main-50 flex-center p-24">
    <img src="assets/images/thumbs/auth-img1.png" alt="">
</div>
<div class="auth-right py-40 px-24 flex-center flex-column">
    <div class="auth-right__inner mx-auto w-100">
        <a href="/courses/etudiant/decouvrir" class="auth-right__logo">
            <img src="assets/images/logo/logo.png" alt="">
        </a>
        <h2 class="mb-8">Reset Password</h2>
        <p class="text-gray-600 text-15 mb-32">For <span class="fw-medium"> @Input.Email</span> </p>

        <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="alert alert-danger" role="alert">
                    @Message
                </div>
            }
            <input type="hidden" name="Input.Code" value="@Input.Code" />
            <div class="mb-24">
                <label for="new-password" class="form-label mb-8 h6">New Password</label>
                <div class="position-relative">
                    <InputText type="password" @bind-Value="Input.Password" id="new-password" class="form-control py-11 ps-40" placeholder="Enter New Password" />
                    <span class="position-absolute top-50 translate-middle-y ms-16 text-gray-600 d-flex"><i class="ph ph-lock"></i></span>
                    <span class="toggle-password position-absolute top-50 inset-inline-end-0 me-16 translate-middle-y ph ph-eye-slash" id="#new-password"></span>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
            </div>
            <div class="mb-24">
                <label for="confirm-password" class="form-label mb-8 h6">Confirm Password</label>
                <div class="position-relative">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" id="confirm-password" class="form-control py-11 ps-40" placeholder="Enter Confirm Password" />
                    <span class="position-absolute top-50 translate-middle-y ms-16 text-gray-600 d-flex"><i class="ph ph-lock"></i></span>
                    <span class="toggle-password position-absolute top-50 inset-inline-end-0 me-16 translate-middle-y ph ph-eye-slash" id="#confirm-password"></span>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>
            </div>

            <button type="submit" class="btn btn-main rounded-pill w-100">Set New Password</button>

            <a href="/Login" class="mt-24 text-main-600 flex-align gap-8 justify-content-center"> <i class="ph ph-arrow-left d-flex"></i> Back To Login</a>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }
    [SupplyParameterFromQuery]
    private string? email { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (email is null || Code is null)
        {
            RedirectManager.RedirectTo("InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
        Input.Email = email;
    }

    private async Task OnValidSubmitAsync()
    {

        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}

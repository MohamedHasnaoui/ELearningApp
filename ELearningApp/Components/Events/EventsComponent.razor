@page "/Events"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<PageTitle>Events</PageTitle>

<div class="dashboard-body">
    <!-- Breadcrumb Start -->
    <div class="breadcrumb mb-24">
        <ul class="flex-align gap-4">
            <li><a href="/" class="text-gray-200 fw-normal text-15 hover-text-main-600">Home</a></li>
            <li> <span class="text-gray-500 fw-normal d-flex"><i class="ph ph-caret-right"></i></span> </li>
            <li><span class="text-main-600 fw-normal text-15">Events</span></li>
        </ul>
    </div>
    <!-- Breadcrumb End -->
    <!-- Recommended Start -->
    <div class="card mt-24 bg-transparent">
        <div class="card-body p-0">
            <div id='wrap'>
                    <div id='calendar' class="position-relative">
                        @if(isAdmin){
                            <button type="button" class="add-event btn btn-main text-sm btn-sm px-24 rounded-pill py-12 d-flex align-items-center gap-2" data-bs-toggle="modal" data-bs-target="#exampleModal">
                                <i class="ph ph-plus me-4"></i>
                                Add Event
                            </button>
                        }
                    </div>
                <div style='clear:both'></div>
            </div>
        </div>
    </div>
    <!-- Recommended End -->
</div>
<!-- Modal Add Event -->
@if(isAdmin){

<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog modal-dialog-centered">
        <div class="modal-content radius-16 bg-base">
            <div class="modal-header py-16 px-24 border border-top-0 border-start-0 border-end-0">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Add New Event</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-24">
                    <EditForm Model="@eventModel" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <!-- Event Title -->
                            <div class="col-12 mb-20">
                                <label class="form-label fw-semibold text-primary-light text-sm mb-8">Event Title :</label>
                                <InputText class="form-control radius-8" placeholder="Enter Event Title" @bind-Value="eventModel.Title" />
                                <ValidationMessage For="@(() => eventModel.Title)" />
                            </div>

                            <!-- Start Date -->
                            <div class="col-md-6 mb-20">
                                <label for="startDate" class="form-label fw-semibold text-primary-light text-sm mb-8">Start Date</label>
                                <div class="position-relative">
                                    <InputDate class="form-control radius-8 bg-base" id="startDate" @bind-Value="eventModel.StartDate" />
                                    <ValidationMessage For="@(() => eventModel.StartDate)" />
                                </div>
                            </div>

                            <!-- End Date -->
                            <div class="col-md-6 mb-20">
                                <label for="endDate" class="form-label fw-semibold text-primary-light text-sm mb-8">End Date</label>
                                <div class="position-relative">
                                    <InputDate class="form-control radius-8 bg-base" id="endDate" @bind-Value="eventModel.EndDate" />
                                    <ValidationMessage For="@(() => eventModel.EndDate)" />
                                </div>
                            </div>

                            <!-- Description -->
                            <div class="col-12 mb-20">
                                <label for="desc" class="form-label fw-semibold text-primary-light text-sm mb-8">Description</label>
                                <InputTextArea class="form-control" id="desc" rows="4" cols="50" placeholder="Write some text" @bind-Value="eventModel.Description" />
                                <ValidationMessage For="@(() => eventModel.Description)" />
                            </div>

                            <!-- Buttons -->
                            <div class="d-flex align-items-center justify-content-center gap-8 mt-24">
                                <button type="reset" class="btn bg-danger-600 hover-bg-danger-800 border-danger-600 hover-border-danger-800 text-md px-24 py-12 radius-8">
                                    Cancel
                                </button>
                                <button type="submit" class="btn bg-main-600 hover-bg-main-800 border-main-600 hover-border-main-800 text-md px-24 py-12 radius-8">
                                    Save
                                </button>
                            </div>
                        </div>
                    </EditForm>

            </div>
        </div>
    </div>
</div>

}

@code {
    [Parameter]
    public ApplicationUser? AuthenticatedUser { get; set; }
    private bool isAdmin;
    private Event eventModel = new Event();

    
    protected override async Task OnInitializedAsync()
    {
        // Obtenir l'état d'authentification
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Vérifier si l'utilisateur est dans le rôle "Admin"
        isAdmin = user.IsInRole("Admin");
    }
    private void HandleValidSubmit()
    {
        // Logic to handle the form submission, e.g., saving to the database.
        Console.WriteLine($"Event Saved: {eventModel.Title}, Start Date: {eventModel.StartDate}, End Date: {eventModel.EndDate}, Description: {eventModel.Description}");
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        await JSRuntime.InvokeVoidAsync("initEventsJs");// Call to scroll
    }
}

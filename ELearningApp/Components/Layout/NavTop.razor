@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using System.Collections.ObjectModel
@using ELearningApp.Hubs
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext Context
@inject IUserService UserService
@inject IJSRuntime JSRuntime
@inject IUserService UserService
@inject IMessageService MessageService
@inject IHttpClientFactory HttpClientFactory
@inject IMessageHub MessageHub

@implements IAsyncDisposable

@rendermode InteractiveServer

<div class="top-navbar flex-between gap-16 py-0">

    <div class="flex-align gap-16">
        <!-- Bouton de bascule -->
        <button type="button" @onclick="toggleStatus" class="toggle-btn d-xl-none d-flex text-26 text-gray-500"><i class="ph ph-list"></i></button>
        <!-- Bouton de bascule -->
        <a href="/" class="sidebar__logo text-center position-sticky inset-block-start-0 bg-white w-100 z-1 p-7 w-350 d-sm-block d-none">
            <img src="assets/images/logo/logo.png" alt="Logo" width="200">
        </a>

    </div>

    <div class="flex-align gap-16">
        <div class="flex-align gap-8">
            <!-- Notifications -->
            @if (isAuthenticated)
            {
                <div class="dropdown">
                    <button class="dropdown-btn @(UsersWithUnseenMessage.Any() ? "shaking-animation":"") text-gray-500 w-40 h-40 bg-main-50 hover-bg-main-100 transition-2 rounded-circle text-xl flex-center " type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <span class="position-relative">
                            <i class="ph ph-bell"></i>
                            @if (UsersWithUnseenMessage.Any())
                            {
                                <span class="alarm-notify position-absolute end-0"></span>
                            }
                        </span>
                    </button>
                    <div class="dropdown-menu dropdown-menu--lg border-0 bg-transparent p-0" >
                        <div class="card border border-gray-100 rounded-12 box-shadow-custom p-0 overflow-hidden">
                            <div class="card-body p-0">
                                <div class="py-8 px-24 bg-main-600">
                                    <div class="flex-between">
                                        <h5 class="text-xl fw-semibold text-white mb-0">Notifications</h5>
                                        <div class="flex-align gap-12">
                                            @* <button type="button" class="bg-white rounded-6 text-sm px-8 py-2 hover-text-primary-600"> Nouveau </button> *@
                                            <button type="button" class="close-dropdown hover-scale-1 text-xl text-white"><i class="ph ph-x"></i></button>
                                        </div>
                                    </div>
                                </div>
                                @if (UsersWithUnseenMessage != null)
                                {
                                    <div class="p-24 max-h-270 overflow-y-auto scroll-sm">
                                        @foreach (var message in UsersWithUnseenMessage)
                                        {
                                            <div class="d-flex align-items-start gap-12">
                                                <img src='@(message.User.imgProfile ?? "assets/images/thumbs/avatar-img1.png")' alt="" class="w-48 h-48 rounded-circle object-fit-cover">
                                                <div class="border-bottom border-gray-100 mb-24 w-">
                                                    <div class="flex-align gap-4">
                                                        <a href="/Profile/@message.User.UserName" class="fw-medium text-15 mb-0 text-gray-300 hover-text-main-600 text-line-2">@(message.User.FormalUserName ?? "")</a>
                                                    </div>
                                                    <div class="flex-align gap-6 mt-8">
                                                        <div class="flex-align gap-4">
                                                            <p class="text-gray-900 text-sm text-line-1">@message.LastMessageContent.Content</p>
                                                        </div>
                                                    </div>
                                                    <div class="mt-16 flex-align gap-8">
                                                        <a href="/Messages/@message.User.UserName" type="button" class="btn btn-main py-8 text-15 fw-normal px-16">Reply</a>
                                                        <button type="button" @onclick="() => MarkAsRead(message.LastMessageContent.SenderId)" class="btn btn-outline-gray py-8 text-15 fw-normal px-16">Mark As Read</button>
                                                    </div>
                                                    <span class="text-gray-200 text-13 mt-8">@message.LastMessageContent.SentAt.ToString("HH:mm MMM dd")</span>
                                                </div>
                                            </div>
                                            @* <div class="d-flex align-items-start gap-12"> *@
                                            @*     <img src="assets/images/thumbs/notification-img2.png" alt="" class="w-48 h-48 rounded-circle object-fit-cover"> *@
                                            @*     <div class=""> *@
                                            @*         <a href="#" class="fw-medium text-15 mb-0 text-gray-300 hover-text-main-600 text-line-2">Patrick a ajouté un commentaire sur le fichier des ressources de conception - Étiquettes intelligentes :</a> *@
                                            @*         <span class="text-gray-200 text-13">Il y a 2 minutes</span> *@
                                            @*     </div> *@
                                            @* </div> *@
                                        }
                                    </div>
                                }
                                else{
                                    <div class="p-24 max-h-270 overflow-y-auto scroll-sm">
                                        <div class="d-flex align-items-start gap-12">
                                        </div>
                                    </div>
                                }

                                <a href="/Messages" class="py-13 px-24 fw-bold text-center d-block text-primary-600 border-top border-gray-100 hover-text-decoration-underline"> Voir tout </a>

                            </div>
                        </div>
                    </div>
                </div>
            }
            <!-- Notifications -->
            <!-- Langue -->
            <div class="dropdown">
                <button class="text-gray-500 w-40 h-40 bg-main-50 hover-bg-main-100 transition-2 rounded-circle text-xl flex-center" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="ph ph-globe"></i>
                </button>
                <div class="dropdown-menu dropdown-menu--md border-0 bg-transparent p-0">
                    <div class="card border border-gray-100 rounded-12 box-shadow-custom">
                        <div class="card-body">
                            <div class="max-h-270 overflow-y-auto scroll-sm pe-8">
                                <div class="form-check form-radio d-flex align-items-center justify-content-between ps-0 mb-16">
                                    <label class="ps-0 form-check-label line-height-1 fw-medium text-secondary-light" for="arabic">
                                        <span class="text-black hover-bg-transparent hover-text-primary d-flex align-items-center gap-8">
                                            <img src="assets/images/thumbs/flag1.png" alt="" class="w-32-px h-32-px border borde border-gray-100 rounded-circle flex-shrink-0">
                                            <span class="text-15 fw-semibold mb-0">Arabe</span>
                                        </span>
                                    </label>
                                    <input class="form-check-input" type="radio" name="language" id="arabic">
                                </div>
                                <div class="form-check form-radio d-flex align-items-center justify-content-between ps-0 mb-16">
                                    <label class="ps-0 form-check-label line-height-1 fw-medium text-secondary-light" for="germany">
                                        <span class="text-black hover-bg-transparent hover-text-primary d-flex align-items-center gap-8">
                                            <img src="assets/images/thumbs/flag2.png" alt="" class="w-32-px h-32-px border borde border-gray-100 rounded-circle flex-shrink-0">
                                            <span class="text-15 fw-semibold mb-0">Allemand</span>
                                        </span>
                                    </label>
                                    <input class="form-check-input" type="radio" name="language" id="germany">
                                </div>
                                <div class="form-check form-radio d-flex align-items-center justify-content-between ps-0 mb-16">
                                    <label class="ps-0 form-check-label line-height-1 fw-medium text-secondary-light" for="english">
                                        <span class="text-black hover-bg-transparent hover-text-primary d-flex align-items-center gap-8">
                                            <img src="assets/images/thumbs/flag3.png" alt="" class="w-32-px h-32-px border borde border-gray-100 rounded-circle flex-shrink-0">
                                            <span class="text-15 fw-semibold mb-0">Anglais</span>
                                        </span>
                                    </label>
                                    <input class="form-check-input" type="radio" name="language" id="english">
                                </div>
                                <div class="form-check form-radio d-flex align-items-center justify-content-between ps-0">
                                    <label class="ps-0 form-check-label line-height-1 fw-medium text-secondary-light" for="spanish">
                                        <span class="text-black hover-bg-transparent hover-text-primary d-flex align-items-center gap-8">
                                            <img src="assets/images/thumbs/flag4.png" alt="" class="w-32-px h-32-px border borde border-gray-100 rounded-circle flex-shrink-0">
                                            <span class="text-15 fw-semibold mb-0">Espagnol</span>
                                        </span>
                                    </label>
                                    <input class="form-check-input" type="radio" name="language" id="spanish">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Langue -->
        </div>


        <!-- Profil utilisateur -->
        @if (isAuthenticated)
        {
            <div class="dropdown">
                <button class="users arrow-down-icon border border-gray-200 rounded-pill p-4 d-inline-block pe-40 position-relative" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <span class="position-relative">
                        <img src="@(AuthenticatedUser?.imgProfile?? "assets/images/thumbs/user-img.png")" alt="Image" class="h-32 w-32 rounded-circle">
                        <span class="activation-badge w-8 h-8 position-absolute inset-block-end-0 inset-inline-end-0"></span>
                    </span>
                </button>
                <div class="dropdown-menu dropdown-menu--lg border-0 bg-transparent p-0">
                    <div class="card border border-gray-100 rounded-12 box-shadow-custom">
                        <div class="card-body">
                            <div class="flex-align gap-8 mb-20 pb-20 border-bottom border-gray-100">
                                <img src="@(AuthenticatedUser?.imgProfile?? "assets/images/thumbs/user-img.png")" alt="" class="w-54 h-54 rounded-circle">
                                <div class="">
                                    @if (AuthenticatedUser != null)
                                    {
                                        <h4 class="mb-0">@AuthenticatedUser.FormalUserName</h4>
                                        <p class="fw-medium text-13 text-gray-200">@AuthenticatedUser.Email</p>
                                    }
                                </div>
                            </div>
                            <ul class="max-h-270 overflow-y-auto scroll-sm pe-4">
                                @if (AuthenticatedUser != null)
                                {
                                    <li class="mb-4">
                                        <a href="/Profile" class="py-12 text-15 px-20 hover-bg-gray-50 text-gray-300 rounded-8 flex-align gap-8 fw-medium text-15">
                                            <span class="text-2xl text-primary-600 d-flex"><i class="ph ph-gear"></i></span>
                                            <span class="text">Paramètres du compte</span>
                                        </a>
                                    </li>
                                }
                                @if (!isEnseignant)
                                {
                                    <li class="mb-4">
                                        <a href="/AbonnementPage" class="py-12 text-15 px-20 hover-bg-gray-50 text-gray-300 rounded-8 flex-align gap-8 fw-medium text-15">
                                            <span class="text-2xl text-primary-600 d-flex"><i class="ph ph-chart-bar"></i></span>
                                            @if (isEtudiant)
                                            {
                                                <span class="text"> Mettre à niveau le plan</span>
                                            }
                                            else
                                            {
                                                <span class="text"> Ajouter un plan</span>

                                            }

                                        </a>
                                    </li>
                                }
                                <li class="mb-4">
                                    <a href="/" class="py-12 text-15 px-20 hover-bg-gray-50 text-gray-300 rounded-8 flex-align gap-8 fw-medium text-15">
                                        <span class="text-2xl text-primary-600 d-flex"><i class="ph ph-chart-line-up"></i></span>
                                        @if (!isAdmin)
                                        {
                                            <span class="text">Activité quotidienne</span>
                                        }
                                        else
                                        {
                                            <span class="text">Statistiques</span>
                                        }
                                    </a>
                                </li>
                                <li class="mb-4">
                                    <a href="/Etudiants" class="py-12 text-15 px-20 hover-bg-gray-50 text-gray-300 rounded-8 flex-align gap-8 fw-medium text-15">
                                        <span class="text-2xl text-primary-600 d-flex"><i class="ph ph-users-three"></i></span>
                                        <span class="text">Étudiants</span>
                                    </a>
                                </li>
                                <li class="mb-4">
                                    <a href="/Enseignant" class="py-12 text-15 px-20 hover-bg-gray-50 text-gray-300 rounded-8 flex-align gap-8 fw-medium text-15">
                                        <span class="text-2xl text-primary-600 d-flex"><i class="ph ph-users"></i></span>
                                        <span class="text">Mentors</span>
                                    </a>
                                </li>
                                <li class="pt-8 border-top border-gray-100">
                                    <form action="Account/Logout" method="post" class="py-12 px-20 hover-bg-danger-50 text-gray-300 hover-text-danger-600 rounded-8 flex-align gap-8 fw-medium">
                                        <AntiforgeryToken />
                                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                                        <button type="submit" class="d-flex align-items-center gap-8 text-15 text-gray-300 hover-text-danger-600">
                                            <span class="text-2xl text-danger-600 d-flex"><i class="ph ph-sign-out"></i></span>
                                            <span class="text">Déconnexion</span>
                                        </button>
                                    </form>

                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <a href="/Login" class="d-flex align-items-center gap-8 text-15 text-gray-300 hover-text-primary-600">
                <span class="text-2xl text-primary-600 d-flex"><i class="ph ph-sign-in"></i></span>
                <span class="text">Se connecter</span>
            </a>
        }
        <!-- Profil utilisateur -->

    </div>
</div>
@code {
    private string? currentUrl;
    [Parameter]
    public ApplicationUser? AuthenticatedUser { get; set; }
    public List<(ApplicationUser User, Message? LastMessageContent)> UsersWithUnseenMessage = new();
    private bool isAuthenticated;
    private bool isAdmin;
    private bool isEnseignant;
    private bool isEtudiant;
    private string CurrentUserId = string.Empty;
    private Dictionary<ApplicationUser?, Message> MessagesRecived = new();
    private HubConnection? HubConnection;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var principal = authState.User;
        isAuthenticated = principal.Identity.IsAuthenticated;
        if(AuthenticatedUser !=null)
            CurrentUserId = AuthenticatedUser.Id;
        isAdmin = principal.IsInRole("Admin");
        isEnseignant = principal.IsInRole("Enseignant");
        isEtudiant = principal.IsInRole("Etudiant");
        UsersWithUnseenMessage = await MessageService.GetUsersWithUnseenMessages(CurrentUserId);
        HubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/messagehub"))
        .Build();
        HubConnection.On<string, string>("MessageStatusUpdate", async (currentUserId, senderId) =>
        {
            if (currentUserId == CurrentUserId)
            {
                await MessageService.MarkAllAsSeen(CurrentUserId, senderId);
                UsersWithUnseenMessage = await MessageService.GetUsersWithUnseenMessages(CurrentUserId);
                await InvokeAsync(StateHasChanged);
            }
        });

        HubConnection.On<string, string, string>("ReceiveMessage", async (senderId, message, receiverId) =>
        {
            if (receiverId == CurrentUserId)
            {
                UsersWithUnseenMessage = await MessageService.GetUsersWithUnseenMessages(CurrentUserId);
                InvokeAsync(StateHasChanged);
            }
        });

        await HubConnection.StartAsync();
        if (principal.Identity.IsAuthenticated)
        {
            currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
            // myUser = await UserManager.GetUserAsync(principal);
        }
    }
    public async ValueTask DisposeAsync()
    {

        if (HubConnection is not null)
        {
            try
            {
                // await MessageHub.SetDisconnectData(CurrentUserId, CurrentConnectionId);
                await HubConnection.DisposeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during disconnection: {ex.Message}");
            }
        }
    }
    private async Task  MarkAsRead(string senderId)
    {
        await HubConnection.SendAsync("MarkAsSeen", CurrentUserId, senderId);
        await InvokeAsync(StateHasChanged);
    }
    private async Task toggleStatus()
    {
        await HubConnection.SendAsync("ToogleStatus",CurrentUserId);
    }
}